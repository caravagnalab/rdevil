group_matrix = NULL,
variance = "Hessian",
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-5,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 1.5
)
)
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
devil.fit.full$params$variance[1,,]
devil.fit.batched$params$variance[1,,]
devil.fit.full$params$variance[1,,]**2 %>% sum()
devil.fit.batched$params$variance[1,,]**2 %>% sum()
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.full$params$beta[1,] - devil.fit.full$params$beta[2,])
# Look at variances
devil.full.res <- rdevil::test_posterior_null(devil.fit.full, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.batch.res <- rdevil::test_posterior_null(devil.fit.batched, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.full.rope.res <- rdevil::test_posterior_ROPE(devil.fit.full, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.batch.rope.res <- rdevil::test_posterior_ROPE(devil.fit.batched, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.full.rope.res$p_val_adj = stats::p.adjust(devil.full.rope.res$p_val, method = "BH")
devil.batch.rope.res$p_val_adj = stats::p.adjust(devil.batch.rope.res$p_val, method = "BH")
# PRECIOSION vs RECALL
results <- list(
'glm' = glm.res,
'devil.full' = devil.full.res,
'devil.batch' = devil.batch.res
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw()
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw()
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
pr_plot
roc_plot
names(results)
hists <- lapply(names(results), function(n) {
pv <- results[[n]] %>%
dplyr::filter(!(gene %in% sim$de.genes)) %>%
pull(p_value)
gap::qqunif(pv)
})
gap::qqunif(pv)
names(results)
results
d_qq <- lapply(names(results), function(n) {
pv <- results[[n]] %>%
dplyr::filter(!(gene %in% sim$de.genes)) %>%
pull(p_value)
x <- seq(0, 1, length=length(pv))
dplyr::tibble(x=x, y=pv, name=n)
}) %>% do.call("bind_rows", .)
d_qq
d_qq %>%
ggplot(mapping = aes(x=x, y=y, col=name)) +
geom_point()
d_qq <- lapply(names(results), function(n) {
pv <- results[[n]] %>%
dplyr::filter(!(gene %in% sim$de.genes)) %>%
pull(p_value) %>%
sort()
x <- seq(0, 1, length=length(pv))
dplyr::tibble(x=x, y=pv, name=n)
}) %>% do.call("bind_rows", .)
d_qq %>%
ggplot(mapping = aes(x=x, y=y, col=name)) +
geom_point()
d_qq %>%
ggplot(mapping = aes(x=x, y=y, col=name)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, col = "black")
batch_factor <- 4
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
variance = "Hessian",
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-5,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 1.5
)
)
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.full$params$beta[1,] - devil.fit.full$params$beta[2,])
# Look at variances
devil.full.res <- rdevil::test_posterior_null(devil.fit.full, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.batch.res <- rdevil::test_posterior_null(devil.fit.batched, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.full.rope.res <- rdevil::test_posterior_ROPE(devil.fit.full, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.batch.rope.res <- rdevil::test_posterior_ROPE(devil.fit.batched, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.full.rope.res$p_val_adj = stats::p.adjust(devil.full.rope.res$p_val, method = "BH")
devil.batch.rope.res$p_val_adj = stats::p.adjust(devil.batch.rope.res$p_val, method = "BH")
# PRECIOSION vs RECALL
results <- list(
'glm' = glm.res,
'devil.full' = devil.full.res,
'devil.batch' = devil.batch.res
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw()
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw()
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
pr_plot
roc_plot
pr_plot
roc_plot
names(results)
d_qq <- lapply(names(results), function(n) {
pv <- results[[n]] %>%
dplyr::filter(!(gene %in% sim$de.genes)) %>%
pull(p_value) %>%
sort()
x <- seq(0, 1, length=length(pv))
dplyr::tibble(x=x, y=pv, name=n)
}) %>% do.call("bind_rows", .)
d_qq %>%
ggplot(mapping = aes(x=x, y=y, col=name)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, col = "black")
gap::qqunif(pv)
batch_factor <- 4
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
variance = "Hessian",
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500 * batch_factor),
lr = 0.5,
gamma_lr = 1e-5,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 1.5
)
)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
library('variancePartition')
data(varPartDEdata)
#write_csv(X, "../../../nebula_counts.csv")
#write_csv(sample_data$pred, "../../../nebula_meta.csv")
colnames(countMatrix)
rownames(countMatrix)
write_csv(countMatrix %>% as.data.frame(), "../../../counts.csv")
write_csv(metadata, "../../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
design_matrix = model.matrix(~ -0 + DiseaseSubtype + Sex, data=metadata)
group_matrix = model.matrix(~factor(metadata$Individual) - 1)
ids <- metadata$Individual
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4, covariance = TRUE)
contrast = c(0,1,-1,0)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "Hessian",
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=1e-5,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
rdevil.fit$params$variance[1,,]
nebula.fit$covariance[1,]
plot(nebula.p.values, devil.res$p_value)
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
gap::qqunif(devil.p.values)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(abs(mu_test), mean = 0, sd = sqrt(total_variance))
}) %>% unlist()
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(abs(eff_d), mean = 0, sd = sqrt(cov_d))
}) %>% unlist()
gap::qqunif(devil.p.values)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d**2, mean = 0, sd = sqrt(cov_d))
}) %>% unlist()
warnings()
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d**2, mean = 0, sd = cov_d)
}) %>% unlist()
warnings()
gene_i <- 1
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
eff_d
cov_d
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d^2, mean = 0, sd = (t(contrast)%*%cov_d%*%contrast))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
gene_i <- 1
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d^2, mean = 0, sd = (t(contrast)%*%cov_d%*%contrast))
}) %>% unlist()
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d^2, mean = 0, sd = (t(contrast)%*%cov_d%*%contrast))
}) %>% unlist()
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d^2, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
}) %>% unlist()
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d^2, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
p * 2
}) %>% unlist()
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
p * 2
}) %>% unlist()
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
}) %>% unlist()
gap::qqunif(devil.p.values)
plot(devil.p.values, devil.res$p_value)
gap::qqunif(devil.p.values)
plot(devil.p.values, devil.res$p_value)
gap::qqunif(devil.p.values)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "Hessian",
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=1e-5,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
}) %>% unlist()
gap::qqunif(devil.p.values)
plot(devil.p.values, devil.res$p_value)
rdevil.fit$params$variance
rdevil.fit$params$variance[1,]
rdevil.fit$params$variance[1,,]
nebula.fit$covariance
nebula.fit$covariance[1,]
rdevil.fit$params$variance[1,,]
nebula.fit$covariance[1,]
nebula.fit$random_effect %>% dim()
nebula.fit$random_effect %>% length()
nebula.fit$random_effect
nebula.fit$overdispersion
rdevil.fit$params$random_effects_variance
rdevil.fit$params$random_effects_variance %>% dim()
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
rdevil.fit$params$variance[1,,]
nebula.fit$covariance[1,]
rdevil.fit$params$random_effects_variance
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
}) %>% unlist()
gap::qqunif(devil.p.values)
plot(devil.p.values, devil.res$p_value)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "Hessian",
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=1e-5,
full_cov=F
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "VI_Estimate",
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=1e-5,
full_cov=F
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
rdevil.fit$params$variance[1,,]
nebula.fit$covariance[1,]
rdevil.fit$params$variance[1,]
nebula.fit$covariance[1,]
nebula.fit$covariance[1,]**2 %>% sum()
rdevil.fit$params$variance[1,]**2 %>% sum()
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,]
#p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
p = 1 - pnorm(eff_d, mean = 0, sd = sqrt((t(contrast)%*%cov_d%*%contrast)))
}) %>% unlist()
warnings()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "VI_Estimate",
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=1e-5,
full_cov=T
)
)
