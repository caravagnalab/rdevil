steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-5,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 3,
gauss_loc = 5
)
)
batch_factor <- 4
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = group_matrix,
variance = "Hessian",
size_factors = TRUE,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500 * batch_factor),
lr = 0.5,
gamma_lr = 1e-5,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 1.5,
gauss_loc = 5
)
)
# compute score vectors
f <- devil.fit.full
gene_idx <- 1
sample_idx <- 1
y <- X[gene_idx, ]
y
beta <- f$params$beta[sample_idx, ]
beta
y <- X[gene_idx, sample_idx]
beta <- f$params$beta[sample_idx, ]
y
beta
design_matrix[sample_idx,]
x <- design_matrix[sample_idx,]
y - exp(x %*% beta)
exp(x %*% beta)
beta
beta <- f$params$beta[sample_idx, ]
beta
beta <- f$params$beta[gene_idx, ]
beta
beta <- f$params$beta[, gene_idx]
beta
x <- design_matrix[sample_idx,]
y - exp(x %*% beta)
(y - exp(x %*% beta)) * x
c((y - exp(x %*% beta)))
c((y - exp(x %*% beta))) * x
num = c((y - exp(x %*% beta))) * x
alpha <- f$params$theta[gene_idx]
alpha
den = 1 + alpha * exp(x %*% beta)
den
num/den
num = c((y - exp(x %*% beta))) * x
den = c(1 + alpha * exp(x %*% beta))
num/den
dL_db = num/den
num = c((y - exp(x %*% beta))) * x
gamma = c(1 + alpha * exp(x %*% beta))
dL_db = num / gamma
eta = c(exp(x %*% beta))
num = (y - eta) * x
eta = c(exp(x %*% beta))
num = (y - eta) * x
gamma = c(1 + alpha * eta)
dL_db = num / gamma
(y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta))
(y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
dL_db = num / gamma
dL_dalpha = (y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
score_vector = c(dL_db, dL_dalpha)
score_vector
score_vector = c(dL_db, dL_dalpha) %>% as.numeric()
score_vector
scores <- matrix(0, nrow = nrow(design_matrix), ncol = ncol(design_matrix) + 1)
scores
for (sample_idx in 1:nrow(design_matrix)) {
y <- X[gene_idx, sample_idx]
beta <- f$params$beta[, gene_idx]
x <- design_matrix[sample_idx,]
alpha <- f$params$theta[gene_idx]
eta = c(exp(x %*% beta))
num = (y - eta) * x
gamma = c(1 + alpha * eta)
dL_db = num / gamma
dL_dalpha = (y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
score_vector = c(dL_db, dL_dalpha) %>% as.numeric()
scores[sample_idx,] <- score_vector
}
scores
# compute hessian ####
beta <- f$params$beta[,gene_idx]
beta
alpha <- 1 / f$params$theta[gene_idx]
# compute score vectors ####
f <- devil.fit.full
gene_idx <- 1
alpha <- 1 / f$params$theta[gene_idx]
beta <- f$params$beta[, gene_idx]
scores <- matrix(0, nrow = nrow(design_matrix), ncol = ncol(design_matrix) + 1)
for (sample_idx in 1:nrow(design_matrix)) {
y <- X[gene_idx, sample_idx]
x <- design_matrix[sample_idx,]
eta = c(exp(x %*% beta))
num = (y - eta) * x
gamma = c(1 + alpha * eta)
dL_db = num / gamma
dL_dalpha = (y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
score_vector = c(dL_db, dL_dalpha) %>% as.numeric()
scores[sample_idx,] <- score_vector
}
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:length(obs)) {
yi <- obs[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H <- H + new_term
}
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:length(obs)) {
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H <- H + new_term
}
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H <- H + new_term
}
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
}
H
# beta * alpha
k * xij * (yi - k)
# beta * alpha
k * xij * (yi - k)
yi - k
xij
design_matrix[sample_idx,]
# beta * alpha
k * design_matrix[sample_idx,] * (yi - k)
# beta * alpha
k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
# beta * alpha
H[1:ncol(design_matrix),(ncol(design_matrix)+1)] <- k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
H
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
# beta^2
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
# beta * alpha
H[1:ncol(design_matrix),(ncol(design_matrix)+1)] <- H[1:ncol(design_matrix),(ncol(design_matrix)+1)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] <- H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
}
H
# alpha**2
alpha_s_term <- - 2*log(1 + alpha*k) / alpha^3
alpha_s_term
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
# beta^2
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
# beta * alpha
H[1:ncol(design_matrix),(ncol(design_matrix)+1)] <- H[1:ncol(design_matrix),(ncol(design_matrix)+1)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] <- H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
# alpha**2
alpha_s_term <- - 2*log(1 + alpha*k) / alpha^3 + 2*k / alpha*2 / gamma - exp(2) * eta * (- 1 /alpha - y) / gamma**2 - y / alpha**2
alpha_s_term <- alpha_s_term + 2 / alpha**3 * trigamma(1/alpha) * digamma(1/alpha) - 1 / alpha**4 * trigamma(1/alpha) * digamma(1/alpha)**2
alpha_s_term <- alpha_s_term - 1 / alpha**2 * trigamma(1/alpha) * digamma(1/alpha) - digamma(1/alpha) / alpha**2 + 2 * digamma(1/alpha) / alpha**3
H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] <- H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] + alpha_s_term
}
H
solve(-H)
f$params$variance
f$params$variance[1,]
f$params$variance[1,,]
solve(-H)
# compute score vectors ####
f <- devil.fit.full
gene_idx <- 1
alpha <- 1 / f$params$theta[gene_idx]
beta <- f$params$beta[, gene_idx]
scores <- matrix(0, nrow = nrow(design_matrix), ncol = ncol(design_matrix) + 1)
for (sample_idx in 1:nrow(design_matrix)) {
y <- X[gene_idx, sample_idx]
x <- design_matrix[sample_idx,]
eta = c(exp(x %*% beta))
num = (y - eta) * x
gamma = c(1 + alpha * eta)
dL_db = num / gamma
dL_dalpha = (y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
score_vector = c(dL_db, dL_dalpha) %>% as.numeric()
scores[sample_idx,] <- score_vector
}
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
# beta^2
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
# beta * alpha
H[1:ncol(design_matrix),(ncol(design_matrix)+1)] <- H[1:ncol(design_matrix),(ncol(design_matrix)+1)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] <- H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
# alpha**2
alpha_s_term <- - 2*log(1 + alpha*k) / alpha^3 + 2*k / alpha*2 / gamma - exp(2) * eta * (- 1 /alpha - y) / gamma**2 - y / alpha**2
alpha_s_term <- alpha_s_term + 2 / alpha**3 * trigamma(1/alpha) * digamma(1/alpha) - 1 / alpha**4 * trigamma(1/alpha) * digamma(1/alpha)**2
alpha_s_term <- alpha_s_term - 1 / alpha**2 * trigamma(1/alpha) * digamma(1/alpha) - digamma(1/alpha) / alpha**2 + 2 * digamma(1/alpha) / alpha**3
H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] <- H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] + alpha_s_term
}
solve(-H)
f$params$variance[1,,]
nrow(X)
dim(design_matrix)
# compute hessian ####
hessian_matrices <- array(0, c(nrow(X), design_matrix)[2]+1, design_matrix)[2]+1))
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
H
# compute hessian ####
hessian_matrices <- array(0, c(nrow(X), dim(design_matrix)[2] + 1, dim(design_matrix)[2] + 1))
# compute hessian ####
hessian_matrices <- array(0, c(nrow(X), dim(design_matrix)[2] + 1, dim(design_matrix)[2] + 1))
for (gene_idx in 1: nrow(X)) {
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
# beta^2
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
# beta * alpha
H[1:ncol(design_matrix),(ncol(design_matrix)+1)] <- H[1:ncol(design_matrix),(ncol(design_matrix)+1)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] <- H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
# alpha**2
alpha_s_term <- - 2*log(1 + alpha*k) / alpha^3 + 2*k / alpha*2 / gamma - exp(2) * eta * (- 1 /alpha - y) / gamma**2 - y / alpha**2
alpha_s_term <- alpha_s_term + 2 / alpha**3 * trigamma(1/alpha) * digamma(1/alpha) - 1 / alpha**4 * trigamma(1/alpha) * digamma(1/alpha)**2
alpha_s_term <- alpha_s_term - 1 / alpha**2 * trigamma(1/alpha) * digamma(1/alpha) - digamma(1/alpha) / alpha**2 + 2 * digamma(1/alpha) / alpha**3
H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] <- H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] + alpha_s_term
}
hessian_matrices[gene_idx,,] <- H
}
# compute hessian ####
hessian_matrices <- array(0, c(nrow(X), dim(design_matrix)[2] + 1, dim(design_matrix)[2] + 1))
for (gene_idx in 1: nrow(X)) {
print(gene_idx)
H = matrix(nrow = dim(design_matrix)[2] + 1, ncol = dim(design_matrix)[2] + 1, data = 0)
# with respect to beta
for (sample_idx in 1:nrow(design_matrix)) {
# beta^2
yi <- X[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
# beta * alpha
H[1:ncol(design_matrix),(ncol(design_matrix)+1)] <- H[1:ncol(design_matrix),(ncol(design_matrix)+1)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] <- H[(ncol(design_matrix)+1), 1:ncol(design_matrix)] + k * design_matrix[sample_idx,] * (yi - k) / (k * alpha + 1)**2
# alpha**2
alpha_s_term <- - 2*log(1 + alpha*k) / alpha^3 + 2*k / alpha*2 / gamma - exp(2) * eta * (- 1 /alpha - y) / gamma**2 - y / alpha**2
alpha_s_term <- alpha_s_term + 2 / alpha**3 * trigamma(1/alpha) * digamma(1/alpha) - 1 / alpha**4 * trigamma(1/alpha) * digamma(1/alpha)**2
alpha_s_term <- alpha_s_term - 1 / alpha**2 * trigamma(1/alpha) * digamma(1/alpha) - digamma(1/alpha) / alpha**2 + 2 * digamma(1/alpha) / alpha**3
H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] <- H[(ncol(design_matrix)+1),(ncol(design_matrix)+1)] + alpha_s_term
}
hessian_matrices[gene_idx,,] <- H
}
array(0, c(nrow(X), nrow(design_matrix), dim(design_matrix)[2] + 1))
array(0, c(nrow(X), nrow(design_matrix), dim(design_matrix)[2] + 1)) %>% dim()
all_scores <- array(0, c(nrow(X), nrow(design_matrix), dim(design_matrix)[2] + 1)) %>% dim()
gene_idx <- 1
# compute score vectors ####
f <- devil.fit.full
all_scores <- array(0, c(nrow(X), nrow(design_matrix), dim(design_matrix)[2] + 1)) %>% dim()
gene_idx <- 1
for (gene_idx in 1:nrow(X)) {
print(gene_idx)
alpha <- 1 / f$params$theta[gene_idx]
beta <- f$params$beta[, gene_idx]
scores <- matrix(0, nrow = nrow(design_matrix), ncol = ncol(design_matrix) + 1)
for (sample_idx in 1:nrow(design_matrix)) {
y <- X[gene_idx, sample_idx]
x <- design_matrix[sample_idx,]
eta = c(exp(x %*% beta))
num = (y - eta) * x
gamma = c(1 + alpha * eta)
dL_db = num / gamma
dL_dalpha = (y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
score_vector = c(dL_db, dL_dalpha) %>% as.numeric()
scores[sample_idx,] <- score_vector
}
all_scores[gene_idx,,] <- scores
}
dim(scores)
dim(all_scores)
all_scores <- array(0, c(nrow(X), nrow(design_matrix), dim(design_matrix)[2] + 1)) %>% dim()
all_scores <- array(0, c(nrow(X), nrow(design_matrix), dim(design_matrix)[2] + 1))
gene_idx <- 1
dim(all_scores)
for (gene_idx in 1:nrow(X)) {
print(gene_idx)
alpha <- 1 / f$params$theta[gene_idx]
beta <- f$params$beta[, gene_idx]
scores <- matrix(0, nrow = nrow(design_matrix), ncol = ncol(design_matrix) + 1)
for (sample_idx in 1:nrow(design_matrix)) {
y <- X[gene_idx, sample_idx]
x <- design_matrix[sample_idx,]
eta = c(exp(x %*% beta))
num = (y - eta) * x
gamma = c(1 + alpha * eta)
dL_db = num / gamma
dL_dalpha = (y * alpha * gamma - y * eta - gamma * log(gamma) - alpha * eta) / (alpha**2 * (1 + alpha * eta)) + 1 / (alpha**2) * (digamma(1/alpha) - digamma(y + 1 / alpha))
score_vector = c(dL_db, dL_dalpha) %>% as.numeric()
scores[sample_idx,] <- score_vector
}
all_scores[gene_idx,,] <- scores
}
# Test p-values ####
contrast <- c(0,1)
p_values_hesssian <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast* glm.fit$Beta[gene_i,])
cov_d = diag(hessian_matrices[gene_i,,])
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov_d%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
glm.fit$Beta[gene_i,]
# Test p-values ####
contrast <- c(0,1)
p_values_hesssian <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast* f$params$beta[gene_i,])
cov_d = diag(hessian_matrices[gene_i,,])
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov_d%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
gene_i
f$params$beta[gene_idx,]
f$params$beta
gene_idx
f$params$beta[gene_idx, ]
f$params$beta[, gene_idx]
# Test p-values ####
contrast <- c(0,1)
p_values_hesssian <- lapply(1:nrow(X), function(gene_idx) {
eff_d = sum(contrast* f$params$beta[,gene_idx])
cov_d = diag(hessian_matrices[gene_i,,])
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov_d%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
# Test p-values ####
contrast <- c(0,1)
p_values_hesssian <- lapply(1:nrow(X), function(gene_idx) {
eff_d = sum(contrast* f$params$beta[,gene_idx])
cov_d = diag(hessian_matrices[gene_idx,,])
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov_d%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
hessian_matrices[1,,]
solve(-hessian_matrices[1,,])
hess <- hessian_matrices[gene_idx,,][1:ncol(design_matrix), 1:ncol(design_matrix)]
hess
# Test p-values ####
contrast <- c(0,1)
p_values_hesssian <- lapply(1:nrow(X), function(gene_idx) {
hess <- hessian_matrices[gene_idx,,][1:ncol(design_matrix), 1:ncol(design_matrix)]
eff_d = sum(contrast* f$params$beta[,gene_idx])
cov_d = diag(solve(-hess))
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov_d%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
devil.full.res <- rdevil::test_posterior_null(devil.fit.full, contrast =contrast)
plot(p_values_hesssian, devil.full.res$p_value)
plot(p_values_hesssian, glm.res$p_value)
plot(p_values_hesssian, devil.full.res$p_value)
plot(p_values_hesssian, glm.res$p_value)
solve(-hessian_matrices[1,1:2,1:2])
solve(-hessian_matrices[1,,])
solve(-hessian_matrices[1,1:2,1:2])
solve(-hess)
# Test p-values ####
contrast <- c(0,1)
p_values_hesssian <- lapply(1:nrow(X), function(gene_idx) {
hess <- hessian_matrices[gene_idx,,][1:ncol(design_matrix), 1:ncol(design_matrix)]
eff_d = sum(contrast* f$params$beta[,gene_idx])
cov_d = solve(-hess)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov_d%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
plot(p_values_hesssian, devil.full.res$p_value)
plot(p_values_hesssian, glm.res$p_value)
plot(p_values_hesssian, devil.full.res$p_value)
plot(p_values_hesssian, glm.res$p_value)
plot(devil.res$p_value, glm.res$p_value)
plot(devil.fit.full$params$theta / glm.fit$overdispersions)
plot(devil.fit.full$params$beta[1,] / glm.fit$Beta[,1])
plot(devil.fit.full$params$beta[2,] / glm.fit$Beta[,2])
dplyr::tibble(
v = abs(devil.fit.full$params$beta[2,] / glm.fit$Beta[,2]),
g = devil.res$gene,
mean_expr = rowMeans(X)
) %>%
ggplot(mapping = aes(x = log10(v), y = log10(mean_expr))) +
geom_point()
# Only Hessian ####
f <- rdevil.fit <- devil.fit.full
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(ggplot2)
require(splatter)
require(tidyverse)
source("scripts/metrics.R")
source("scripts/simulations.R")
source("../benchmark_de/de_scripts/devil.R")
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(ggplot2)
require(splatter)
require(tidyverse)
source("scripts/metrics.R")
source("scripts/simulations.R")
source("../benchmark_de/de_scripts/devil.R")
source("../benchmark_de/de_scripts/glmGamPoi.R")
sim <- simulate()
gene_data <- sim$gene.data
X <- sim$counts.data %>% as.matrix()
design_matrix <- model.matrix(~ Group, sim$cell.data)
group_matrix <- model.matrix(~ Batch, sim$cell.data)
contrast <- as.array(c(0,1))
# "_" means fixed effects, "." means random effects
colnames(X) <- NULL
glm.fit <- glm_fit(counts = X, model_matrix = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = contrast) %>%
dplyr::rename(gene = name) %>%
dplyr::select(gene, pval, adj_pval, lfc) %>%
`colnames<-`(c("gene", "p_value", "p_val_adj", "avg_log2FC"))
batch_factor <- 1
devil.fit.full <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
size_factors = TRUE,
group_matrix = NULL,
variance = "Hessian",
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-5,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 3,
gauss_loc = 5
)
)
