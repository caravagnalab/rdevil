expr_profile <- X[bg,]
dplyr::tibble(expr = expr_profile, class = classes) %>% dplyr::filter(expr > 0) %>%
dplyr::group_by(class) %>%
dplyr::summarise(mean_expr = mean(expr)) %>%
dplyr::mutate(gene = bg, idx = i)
}) %>% do.call("bind_rows", .)
d
d %>% ggplot(mapping = aes(x = idx, y = mean_expr, col = class)) +
geom_point()
bg <- bad_genes$gene[83]
classes <- rowSums(design_matrix) %>% as.factor()
d <- lapply(1:length(bad_genes$gene), function(i) {
bg = bad_genes$gene[i]
expr_profile <- X[bg,]
dplyr::tibble(expr = expr_profile, class = classes) %>% #dplyr::filter(expr > 0) %>%
dplyr::group_by(class) %>%
dplyr::summarise(mean_expr = mean(expr)) %>%
dplyr::mutate(gene = bg, idx = i)
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x = idx, y = mean_expr, col = class)) +
geom_point()
setwd("~/Desktop/dottorato/rdevil_project/nullpower")
setwd("~/Desktop/dottorato/rdevil_project/nullpower")
rm(list = ls())
setwd("~/Desktop/dottorato/rdevil_project/nullpower")
rm(list = ls())
seurat.obj <- readRDS("datasets/bca.seurat.rds")
seurat.obj <- readRDS("bca.seurat.rds")
setwd("~/Desktop/dottorato/rdevil_project/nullpower")
rm(list = ls())
seurat.obj <- readRDS("bca.seurat.rds")
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(ggplot2)
require(splatter)
require(tidyverse)
source("scripts/metrics.R")
source("scripts/simulations.R")
source("../benchmark_de/de_scripts/devil.R")
source("../benchmark_de/de_scripts/glmGamPoi.R")
sim <- simulate()
gene_data <- sim$gene.data
X <- sim$counts.data %>% as.matrix()
design_matrix <- model.matrix(~ Group, sim$cell.data)
design_matrix <- model.matrix(~ 1 + Group, sim$cell.data)
design_matrix
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(ggplot2)
require(splatter)
require(tidyverse)
source("scripts/metrics.R")
source("scripts/simulations.R")
source("../benchmark_de/de_scripts/devil.R")
source("../benchmark_de/de_scripts/glmGamPoi.R")
sim <- simulate()
gene_data <- sim$gene.data
X <- sim$counts.data %>% as.matrix()
design_matrix <- model.matrix(~ 1 + Group, sim$cell.data)
contrast <- as.array(c(0,1))
batch_factor <- 4
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "OneCycleLR",
steps = as.integer(500 * batch_factor / 2),
lr = 0.5 / batch_factor,
gamma_lr = 1e-4,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor)
#full_cov = TRUE,
#prior_loc = 100,
#theta_bounds = c(0.005, 1e9),
#init_loc = 100
)
)
t <- rdevil::test_posterior_null(devil.fit.batched, as.array(c(0,1)))
t
colnames(devil.fit.batched$params$beta)
row.names(devil.fit.batched$params$beta)
dim(devil.fit.batched$params$beta)
dim(devil.fit.batched$params$beta)[1]
devil.fit.batched$params$beta[,dim(devil.fit.batched$params$beta)[1]]
devil.fit.batched$params$beta[dim(devil.fit.batched$params$beta)[1],]
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
data(sample_data)
sample_data$count
# Create design matrix
X <- sample_data$count %>% as.matrix()
design_matrix = model.matrix(~ X1+X2+cc, data=sample_data$pred)
group_matrix = model.matrix(~factor(sample_data$sid) - 1)
ids <- sample_data$sid
qrx <- design_matrix
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(steps=1000L, lr=0.5, gamma_lr=0.0001, full_cov=T)
)
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
data(sample_data)
sample_data$count
# Create design matrix
X <- sample_data$count %>% as.matrix()
design_matrix = model.matrix(~ X1+X2+cc, data=sample_data$pred)
group_matrix = model.matrix(~factor(sample_data$sid) - 1)
ids <- sample_data$sid
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(steps=1000L, lr=0.5, gamma_lr=0.0001, full_cov=T)
)
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
data(sample_data)
sample_data$count
# Create design matrix
X <- sample_data$count %>% as.matrix()
design_matrix = model.matrix(~ X1+X2+cc, data=sample_data$pred)
group_matrix = model.matrix(~factor(sample_data$sid) - 1)
ids <- sample_data$sid
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(steps=1000L, lr=0.5, gamma_lr=0.0001, full_cov=T)
)
design_matrix
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(steps=1000L, lr=0.5, gamma_lr=0.0001, full_cov=T)
)
reticulate::py_last_error()
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
data(sample_data)
sample_data$count
# Create design matrix
X <- sample_data$count %>% as.matrix()
design_matrix = model.matrix(~ X1+X2+cc, data=sample_data$pred)
group_matrix = model.matrix(~factor(sample_data$sid) - 1)
ids <- sample_data$sid
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(steps=1000L, lr=0.5, gamma_lr=0.0001, full_cov=T)
)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
data(sample_data)
sample_data$count
sample_data$pred
sample_data$sid
sample_data$count
X <- sample_data$count %>% as.matrix()
sample_data$sid
sample_data$pred$id = sample_data$sid
write_csv(X, "../../../nebula_counts.csv", sep ",")
write_csv(X, "../../../nebula_counts.csv")
X <- sample_data$count %>% as.data.frame()
X <- sample_data$count %>% as.matrix() %>% as.data.frame()
ncol(X)
colnames(X)
X <- sample_data$count %>% as.matrix() %>% as.data.frame()
sample_data$pred$id = sample_data$sid
write_csv(X, "../../../nebula_counts.csv")
write_csv(sample_data$pred, "../../../nebula_meta.csv")
group_matrix
# Create design matrix
X <- sample_data$count %>% as.matrix()
design_matrix = model.matrix(~ X1+X2+cc, data=sample_data$pred)
group_matrix = model.matrix(~factor(sample_data$sid) - 1)
group_matrix
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F)
)
rdevil.fit$params$beta
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
data(sample_data)
X <- sample_data$count %>% as.matrix() %>% as.data.frame()
sample_data$pred$id = sample_data$sid
write_csv(X, "../../../nebula_counts.csv")
write_csv(sample_data$pred, "../../../nebula_meta.csv")
# Create design matrix
X <- sample_data$count %>% as.matrix()
design_matrix = model.matrix(~ X1+X2+cc, data=sample_data$pred)
group_matrix = model.matrix(~factor(sample_data$sid) - 1)
ids <- sample_data$sid
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F)
)
rdevil.fit$params$beta
nebula.fit$summary
rdevil.fit$params$beta[1,]
nebula.fit$summary$`logFC_(Intercept)`
plot(rdevil.fit$params$beta[1,], nebula.fit$summary$`logFC_(Intercept)`)
dim(X)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F)
)
rdevil.fit$params$beta[1,]
nebula.fit$summary$`logFC_(Intercept)`
nebula.fit$summary
plot(rdevil.fit$params$beta[1,], nebula.fit$summary$`logFC_(Intercept)`)
plot(rdevil.fit$params$beta[2,], nebula.fit$summary$logFC_X1)
plot(rdevil.fit$params$beta[3,], nebula.fit$summary$logFC_X2)
plot(rdevil.fit$params$beta[4,], nebula.fit$summary$logFC_cccontrol)
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4, covariance = TRUE)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F)
)
nebula.fit$overdispersion
rdevil.fit$params$theta
1 / rdevil.fit$params$theta
rdevil.fit$params$theta
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F,
disp_loc = 5
)
)
nebula.fit$overdispersion
rdevil.fit$params$theta
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F,
disp_loc = 10
)
)
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(re_ln$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
contrast = c(0,1,-1,0)
## testing the hypothesis
eff = sum(contrast*re_ln$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(re_ln$covariance[gene_i,])
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
gene_i = 1
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
contrast = c(0,1,-1,0)
## testing the hypothesis
eff = sum(contrast*re_ln$summary[gene_i,1:4])
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
eff
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
rdevil::test_posterior_null(rdevil.fit, contrast = as.array(c(0,1,-1,0)))
eff
p
rdevil::test_posterior_null(rdevil.fit, contrast = as.array(c(0,1,-1,0)))
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
rdevil.fit$params$eta
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(ggplot2)
require(splatter)
require(tidyverse)
source("scripts/metrics.R")
source("scripts/simulations.R")
source("../benchmark_de/de_scripts/devil.R")
source("../benchmark_de/de_scripts/glmGamPoi.R")
sim <- simulate()
gene_data <- sim$gene.data
X <- sim$counts.data %>% as.matrix()
design_matrix <- model.matrix(~ Group, sim$cell.data)
contrast <- as.array(c(0,1))
# "_" means fixed effects, "." means random effects
colnames(X) <- NULL
glm.fit <- glm_fit(counts = X, model_matrix = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = contrast) %>% dplyr::rename(gene = name) %>% dplyr::select(gene, pval, adj_pval, lfc) %>% `colnames<-`(c("gene", "p_value", "p_val_adj", "avg_log2FC"))
batch_factor <- 1
devil.fit.full <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-4,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE
)
)
batch_factor <- 4
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "OneCycleLR",
steps = as.integer(500 * batch_factor / 2),
lr = 0.5 / batch_factor,
gamma_lr = 1e-4,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor)
#full_cov = TRUE,
#prior_loc = 100,
#theta_bounds = c(0.005, 1e9),
#init_loc = 100
)
)
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
# Look at variances
devil.full.res <- rdevil::test_posterior_null(devil.fit.full, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.batch.res <- rdevil::test_posterior_null(devil.fit.batched, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.full.rope.res <- rdevil::test_posterior_ROPE(devil.fit.full, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.batch.rope.res <- rdevil::test_posterior_ROPE(devil.fit.batched, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.full.rope.res$p_val_adj = stats::p.adjust(devil.full.rope.res$p_val, method = "BH")
devil.batch.rope.res$p_val_adj = stats::p.adjust(devil.batch.rope.res$p_val, method = "BH")
# PRECIOSION vs RECALL
results <- list(
'glm' = glm.res,
'devil.full' = devil.full.res,
'devil.batch' = devil.batch.res
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw()
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw()
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
pr_plot
roc_plot
names(results)
hists <- lapply(names(results), function(n) {
results[[n]] %>%
dplyr::filter(!(gene %in% sim$de.genes)) %>%
ggplot(mapping = aes(x = p_value)) +
geom_histogram(bins = 100) +
ggtitle(n)
})
ggpubr::ggarrange(plotlist = hists)
qqnorm(glm.res$p_value)
qqnorm(devil.batch.res$p_value)
glm.res %>%
ggplot(mapping = aes(x=p_value, y=p_value)) +
geom_point()
BiocManager::install("variancePartition")
BiocManager::install("variancePartition")
BiocManager::install("variancePartition")
BiocManager::install("variancePartition", force = TRUE)
BiocManager::install("variancePartition", force = TRUE)
