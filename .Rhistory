subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# xgbBoost model ####
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
setwd("~/Desktop/dottorato/biPOD_project/paper/CRO")
rm(list=ls())
require(tidyverse)
library(xgboost)
library(randomForest)
set.seed(12345)
meta_data <- readRDS("data/meta_data.rds")
with_t0 <- F
if (!with_t0) {
res_path <- "results/summary_coming_no_t0.rds"
res <- readRDS("results/summary_coming_no_t0.rds")
fits_path <- "results/fits_no_t0/"
} else {
res_path <- "results/summary_coming.rds"
res <- readRDS("results/summary_coming.rds")
fits_path <- "results/fits/"
}
CHOSEN_OBS <- Inf
res_total <- res
if (CHOSEN_OBS == Inf) {
res <- res %>%
group_by(id) %>%
filter(n_obs == max(n_obs)) %>%
dplyr::rename(codice = id) %>%
dplyr::left_join(readRDS("data/dati_clinici.rds"), by = "codice") %>%
dplyr::left_join(readRDS("data/meta_data.rds"), by = "codice") %>%
dplyr::mutate(Treated = !is.na(mese_inizio_terapia)) %>%
dplyr::mutate(pattern = ifelse(growth == "exponential", "Exponential", ifelse(has_reached, "Stable", "Logistic")))
} else {
res <- res %>%
group_by(id) %>%
filter(n_obs == CHOSEN_OBS) %>%
dplyr::rename(codice = id) %>%
dplyr::left_join(readRDS("data/dati_clinici.rds"), by = "codice") %>%
dplyr::left_join(readRDS("data/meta_data.rds"), by = "codice") %>%
dplyr::mutate(Treated = !is.na(mese_inizio_terapia)) %>%
dplyr::mutate(pattern = ifelse(growth == "exponential", "Exponential", ifelse(has_reached, "Stable", "Logistic")))
}
colnames(res)
if (with_t0) {
data <- res %>%
dplyr::select(rho, pattern, UM_M, Tri12, Del13, Del11, Del17, TP53, CD49d, bimodal_CD49d, t0, Treated) %>%
dplyr::mutate(Treated = as.factor(Treated)) %>%
dplyr::mutate(pattern = as.factor(pattern)) %>%
dplyr::mutate(
pattern = as.numeric(pattern) - 1,
UM_M = UM_M == "M",
Tri12 = Tri12 == "si",
Del13 = Del13 == "si",
Del11 = Del11 == "si",
Del17 = Del17 == "si",
TP53 = TP53 == "si",
CD49d = CD49d == "si",
bimodal_CD49d = bimodal_CD49d == "si"
)
} else {
data <- res %>%
dplyr::select(rho, pattern, UM_M, Tri12, Del13, Del11, Del17, TP53, CD49d, bimodal_CD49d, Treated) %>%
dplyr::mutate(Treated = as.factor(Treated)) %>%
dplyr::mutate(pattern = as.factor(pattern)) %>%
dplyr::mutate(
pattern = as.numeric(pattern) - 1,
UM_M = UM_M == "M",
Tri12 = Tri12 == "si",
Del13 = Del13 == "si",
Del11 = Del11 == "si",
Del17 = Del17 == "si",
TP53 = TP53 == "si",
CD49d = CD49d == "si",
bimodal_CD49d = bimodal_CD49d == "si"
)
}
colnames(data)
dim(data)
index <- caret::createDataPartition(data$Treated, p = 0.7, list = FALSE)
# Split the data into training and testing sets
training_data <- data[index, ]
testing_data <- data[-index, ]
# xgbBoost model ####
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
xgb_model <- xgboost::xgboost(
data = as.matrix(training_data[, 2:(ncol(training_data)-1)]),  # Exclude the response variable
label = as.numeric(training_data$Treated) - 1,  # Labels should start from 0 for classification
max.depth = 3, eta = .1, nthread = 8, nrounds = 2000, objective = "binary:logistic", verbose = 1,
method = "xgbTree",
subsample = .1
)
importance_matrix <- xgb.importance(colnames(training_data)[2:(ncol(training_data)-1)], model = xgb_model)
xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
# predictions
feature_indexes <- 2:(ncol(training_data)-1)
train_predictions <- predict(xgb_model, as.matrix(training_data[, feature_indexes])) >= .5
test_predictions <- predict(xgb_model, as.matrix(testing_data[, feature_indexes])) >= .5
cm_train <- table(train_predictions, training_data$Treated)
cm_test <- table(test_predictions, testing_data$Treated)
train_acc <- sum(diag(cm_train)) / sum(cm_train)
test_acc <- sum(diag(cm_test)) / sum(cm_test)
print(train_acc)
print(test_acc)
feature_plot <- xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance")
feature_plot <- xgb.ggplot.importance(importance_matrix, rel_to_first = TRUE, xlab = "Relative importance") +
theme(legend.position = "bottom")
feature_plot
print(train_acc)
print(test_acc)
ggsave(paste0("img/importance_plot.pdf"), dpi=400, width = 8, height = 8, units = "in", plot = feature_plot)
saveRDS(xgb_model, paste0("results/classifier_", CHOSEN_OBS,".rds"))
whole_preds <- lapply(unique(res$codice), function(p_id) {
r_p <- res_total %>%
dplyr::filter(id == p_id) %>%
dplyr::rename(codice = id) %>%
dplyr::left_join(readRDS("data/dati_clinici.rds"), by = "codice") %>%
dplyr::left_join(readRDS("data/meta_data.rds"), by = "codice") %>%
dplyr::mutate(Treated = !is.na(mese_inizio_terapia))
obs <- r_p$n_obs
r_p$pattern = ifelse(r_p$growth == "exponential", "Exponential", ifelse(r_p$has_reached, "Stable", "Logistic"))
if (with_t0) {
r_p <- r_p %>%
dplyr::select(rho, pattern, UM_M, Tri12, Del13, Del11, Del17, TP53, CD49d, bimodal_CD49d, Treated, t0) %>%
dplyr::mutate(Treated = as.factor(Treated)) %>%
dplyr::mutate(pattern = as.factor(pattern)) %>%
dplyr::mutate(
pattern = as.numeric(pattern) - 1,
UM_M = UM_M == "M",
Tri12 = Tri12 == "si",
Del13 = Del13 == "si",
Del11 = Del11 == "si",
Del17 = Del17 == "si",
TP53 = TP53 == "si",
CD49d = CD49d == "si",
bimodal_CD49d = bimodal_CD49d == "si"
)
} else {
r_p <- r_p %>%
dplyr::select(rho, pattern, UM_M, Tri12, Del13, Del11, Del17, TP53, CD49d, bimodal_CD49d, Treated) %>%
dplyr::mutate(Treated = as.factor(Treated)) %>%
dplyr::mutate(pattern = as.factor(pattern)) %>%
dplyr::mutate(
pattern = as.numeric(pattern) - 1,
UM_M = UM_M == "M",
Tri12 = Tri12 == "si",
Del13 = Del13 == "si",
Del11 = Del11 == "si",
Del17 = Del17 == "si",
TP53 = TP53 == "si",
CD49d = CD49d == "si",
bimodal_CD49d = bimodal_CD49d == "si"
)
}
r_p$predictions <- predict(xgb_model, as.matrix(r_p %>% dplyr::select(!Treated))) >= .5
#r_p$predictions <- parsnip::predict_class.model_fit(cart_fit, r_p)
r_p$n_obs <- obs
r_p$final_obs <- max(obs)
r_p$id <- p_id
r_p
}) %>% do.call("bind_rows", .)
whole_preds <- whole_preds %>%
dplyr::mutate(class = ifelse(id %in% training_data$codice, "Train", "Test"))
if (with_t0) {
saveRDS(whole_preds, paste0("results/predictions/pred_", CHOSEN_OBS, ".rds"))
} else {
saveRDS(whole_preds, paste0("results/predictions_no_t0/pred_", CHOSEN_OBS, ".rds"))
}
whole_preds %>%
dplyr::mutate(delta_obs = n_obs - final_obs) %>%
dplyr::group_by(delta_obs, class) %>%
dplyr::summarise(acc = sum(predictions == Treated) / n(), n = n()) %>%
ggplot(mapping = aes(x = delta_obs, y = acc, col=class, size=n)) +
geom_point() +
geom_line(linewidth = .5)
setwd("~/Desktop/dottorato/biPOD_project/paper/CRO")
rm(list=ls())
require(tidyverse)
with_t0 <- F
CHOSEN_OBS <- Inf
if (with_t0) {
whole_preds <- readRDS(paste0("results/predictions/pred_", CHOSEN_OBS, ".rds"))
title <- "Accuracy considering T0"
evo_name <- "img/evo.pdf"
} else {
whole_preds <- readRDS(paste0("results/predictions_no_t0/pred_", CHOSEN_OBS, ".rds"))
title <- "Accuracy without considering T0"
evo_name <- "img/evo_no_T0.pdf"
}
# accuracy plot ####
p0 <- whole_preds %>%
dplyr::mutate(delta_obs = n_obs - final_obs) %>%
dplyr::group_by(delta_obs, class) %>%
dplyr::summarise(acc = sum(predictions == Treated) / n(), n = n()) %>%
ggplot(mapping = aes(x = delta_obs, y = acc, col=class, size=n)) +
geom_point() +
geom_line(linewidth = .5) +
lims(y=c(0,1)) +
theme_bw() +
ggtitle(title)
p0
# look at consecutive predictions ####
plots <- lapply(0:5, function(CONSECUTIVE_PRED) {
whole_preds <- lapply(unique(whole_preds$id), function(p) {
preds_evo <- whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::arrange(n_obs)
v <- preds_evo$predictions
if (length(v) > CONSECUTIVE_PRED) {
for (i in (CONSECUTIVE_PRED+1):length(v)) {
prev_pred <- (v[(i-CONSECUTIVE_PRED):(i-1)])
if (all(prev_pred) & !v[i]) {
v[i] <- TRUE
}
}
}
preds_evo$new_preds <- v
preds_evo
}) %>% do.call("bind_rows", .)
whole_preds %>%
dplyr::mutate(delta_obs = n_obs - final_obs) %>%
dplyr::group_by(delta_obs, class) %>%
dplyr::summarise(acc = sum(new_preds == Treated) / n(), n = n()) %>%
ggplot(mapping = aes(x = delta_obs, y = acc, col=class, size=n)) +
geom_point() +
geom_line(linewidth = .5) +
lims(y=c(0,1)) +
theme_bw() +
ggtitle(title, subtitle = paste0(CONSECUTIVE_PRED, " consecutive predictions"))
})
ggpubr::ggarrange(plotlist = plots)
# look at consecutive predictions ####
plots <- lapply(0:2, function(CONSECUTIVE_PRED) {
whole_preds <- lapply(unique(whole_preds$id), function(p) {
preds_evo <- whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::arrange(n_obs)
v <- preds_evo$predictions
if (length(v) > CONSECUTIVE_PRED) {
for (i in (CONSECUTIVE_PRED+1):length(v)) {
prev_pred <- (v[(i-CONSECUTIVE_PRED):(i-1)])
if (all(prev_pred) & !v[i]) {
v[i] <- TRUE
}
}
}
preds_evo$new_preds <- v
preds_evo
}) %>% do.call("bind_rows", .)
whole_preds %>%
dplyr::mutate(delta_obs = n_obs - final_obs) %>%
dplyr::group_by(delta_obs, class) %>%
dplyr::summarise(acc = sum(new_preds == Treated) / n(), n = n()) %>%
ggplot(mapping = aes(x = delta_obs, y = acc, col=class, size=n)) +
geom_point() +
geom_line(linewidth = .5) +
lims(y=c(0,1)) +
theme_bw() +
ggtitle(title, subtitle = paste0(CONSECUTIVE_PRED, " consecutive predictions"))
})
ggpubr::ggarrange(plotlist = plots)
evo_accuracy <- ggpubr::ggarrange(plotlist = plots)
ggsave("img/stabilized_accuracy_evo.pdf", dpi=300, width = 18, height = 18)
evo_accuracy <- ggpubr::ggarrange(plotlist = plots)
evo_accuracy
evo_accuracy
ggsave("img/stabilized_accuracy_evo.pdf", dpi=300, width = 10, height = 10)
ggsave("img/stabilized_accuracy_evo.pdf", dpi=300, width = 16, height = 9)
p <- whole_preds$id[1]
evo_patient <- function(p) {
whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::mutate(CorrectPrediction = as.numeric(predictions == Treated), delta_obs = n_obs - final_obs) %>%
ggplot(mapping = aes(x=delta_obs, y=CorrectPrediction)) +
geom_point() +
geom_line() +
lims(y=c(0,1)) +
theme_bw() +
theme(legend.position = "none") +
ggtitle(p)
}
evo_patient
evo_patient(p)
data = readRDS("data/data.rds")
meta_data = readRDS("data/meta_data.rds") %>%
dplyr::filter(!(is.na(mesi_intervallo)))
time_factor = 12
# Fit single patients ####
id <- meta_data$codice[2]
data %>%
dplyr::filter(codice == id) %>%
dplyr::rename(count = value) %>%
dplyr::mutate(time = time / time_factor)
evo_patient <- function(p) {
p1 <- whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::mutate(CorrectPrediction = as.numeric(predictions == Treated), delta_obs = n_obs - final_obs) %>%
ggplot(mapping = aes(x=delta_obs, y=CorrectPrediction)) +
geom_point() +
geom_line() +
lims(y=c(0,1)) +
theme_bw() +
theme(legend.position = "none") +
ggtitle(p)
p2 <- data %>%
dplyr::filter(codice == id) %>%
dplyr::rename(count = value) %>%
dplyr::mutate(time = time / time_factor) %>%
ggplot(mapping = aes(x=time, y=count)) +
geom_point()
ggpubr::ggarrange(plotlist = list(p1, p2))
}
evo_patient(id)
evo_patient <- function(p) {
p1 <- whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::mutate(CorrectPrediction = as.numeric(predictions == Treated), delta_obs = n_obs - final_obs) %>%
ggplot(mapping = aes(x=delta_obs, y=CorrectPrediction)) +
geom_point() +
geom_line() +
lims(y=c(0,1)) +
theme_bw() +
theme(legend.position = "none") +
ggtitle(p)
p2 <- data %>%
dplyr::filter(codice == id) %>%
dplyr::rename(count = value) %>%
dplyr::mutate(time = time / time_factor) %>%
ggplot(mapping = aes(x=time, y=count)) +
geom_point() +
theme_bw() +
theme(legend.position = "none") +
ggtitle(p)
ggpubr::ggarrange(plotlist = list(p1, p2))
}
evo_patient(id)
evo_patient <- function(p) {
p1 <- whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::mutate(CorrectPrediction = as.numeric(predictions == Treated), delta_obs = n_obs - final_obs) %>%
ggplot(mapping = aes(x=delta_obs, y=CorrectPrediction)) +
geom_point() +
geom_line() +
lims(y=c(0,1)) +
theme_bw() +
theme(legend.position = "none") +
ggtitle(p)
p2 <- data %>%
dplyr::filter(codice == id) %>%
dplyr::rename(count = value) %>%
dplyr::mutate(time = time / time_factor) %>%
ggplot(mapping = aes(x=time, y=count)) +
geom_point() +
theme_bw() +
theme(legend.position = "none") +
ggtitle("")
ggpubr::ggarrange(plotlist = list(p1, p2))
}
evo_patient(id)
plots_evo <- lapply(unique(whole_preds$id), evo_patient)
pdf(evo_name, width = 8, height = 8)
for (p in plots_evo) {
print(p)
}
dev.off()
pdf(evo_name, width = 16, height = 8)
for (p in plots_evo) {
print(p)
}
dev.off()
evo_patient <- function(p) {
p1 <- whole_preds %>%
dplyr::filter(id == p) %>%
dplyr::mutate(CorrectPrediction = as.numeric(predictions == Treated), delta_obs = n_obs - final_obs) %>%
ggplot(mapping = aes(x=delta_obs, y=CorrectPrediction)) +
geom_point() +
geom_line() +
lims(y=c(0,1)) +
theme_bw() +
theme(legend.position = "none") +
ggtitle(p)
p2 <- data %>%
dplyr::filter(codice == p) %>%
dplyr::rename(count = value) %>%
dplyr::mutate(time = time / time_factor) %>%
ggplot(mapping = aes(x=time, y=count)) +
geom_point() +
theme_bw() +
theme(legend.position = "none") +
ggtitle("")
ggpubr::ggarrange(plotlist = list(p1, p2))
}
evo_patient(id)
plots_evo <- lapply(unique(whole_preds$id), evo_patient)
pdf(evo_name, width = 16, height = 8)
for (p in plots_evo) {
print(p)
}
dev.off()
