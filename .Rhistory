hist(devil.res$p_value, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value / 2, breaks = 100, xlim = c(0,1))
gap::qqunif(devil.res$p_value / 2)
gap::qqunif(devil.res$p_value)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T,
batch_size = 1000
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
gap::qqunif(devil.p.values)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value / 2, breaks = 100, xlim = c(0,1))
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value)
hist(glm.res$pval)
hist(devil.res$p_value)
hist(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]**2
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
dim(X)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T,
batch_size = 12
)
)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T,
batch_size = 12L
)
)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(devil.res$p_value)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T,
batch_size = 12L
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value)
hist(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
gap::qqunif(nebula.p.values)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
hist(devil.res$p_value)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value)
hist(devil.res$p_value)
hist(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value)
setwd("~/Desktop/dottorato/rdevil_project/de_analysis")
# Null test
is.pb <- FALSE
ct.index <- 1
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed")
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(ct.index)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(ct.index) +
theme_bw()
ct.index <- 2
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(ct.index) +
theme_bw()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F,
batch_size = 24L,
gauss_disp = 5
)
)
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=F,
batch_size = 24L,
gauss_loc = 5
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,]**2
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
gap::qqunif(devil.p.values)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
library('variancePartition')
data(varPartDEdata)
#write_csv(X, "../../../nebula_counts.csv")
#write_csv(sample_data$pred, "../../../nebula_meta.csv")
colnames(countMatrix)
rownames(countMatrix)
# Create design matrix
colnames(metadata)
X <- countMatrix
design_matrix = model.matrix(~ -0 + DiseaseSubtype + Sex, data=metadata)
group_matrix = model.matrix(~factor(metadata$Individual) - 1)
ids <- metadata$Individual
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4, covariance = TRUE)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
gene_i = 1
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
contrast = c(0,1,-1,0)
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T,
batch_size = 24L,
gauss_loc = 5
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
contrast = c(0,1,-1,0)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
gene_i = 1
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
gap::qqunif(nebula.p.values)
gap::qqunif(devil.p.values)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value)
hist(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(glm.res$pval, breaks = 100)
dim(X)
nebula.fit$overdispersion
rdevil.fit$params$theta
nebula.coeff <- nebula.fit$summary[,1:ncol(design_matrix)]
plot(nebula.fit$overdispersion$Cell, rdevil.fit$params$theta)
plot(nebula.fit$overdispersion$Subject, rdevil.fit$params$theta)
plot(rdevil.fit$params$beta[1,], nebula.coeff[,1])
plot(rdevil.fit$params$beta[2,], nebula.coeff[,2])
plot(rdevil.fit$params$beta[3,], nebula.coeff[,3])
plot(rdevil.fit$params$beta[4,], nebula.coeff[,4])
plot(rdevil.fit$params$beta[1,], glm.fit$Beta[,1])
plot(rdevil.fit$params$beta[2,], glm.fit$Beta[,2])
plot(rdevil.fit$params$beta[3,], glm.fit$Beta[,3])
plot(rdevil.fit$params$beta[4,], glm.fit$Beta[,4])
plot(rdevil.fit$params$beta[3,] - rdevil.fit$params$beta[2,], glm.fit$Beta[,3] - glm.fit$Beta[,2])
plot(glm.res$adj_pval, devil.res$p_value_adj)
plot(glm.fit$overdispersions, rdevil.fit$params$theta)
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]**2
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])**2
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(glm.res$pval, breaks = 100)
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(glm.res$pval, breaks = 100)
setwd("~/Desktop/dottorato/rdevil_project/de_analysis")
# Null test
is.pb <- FALSE
ct.index <- 2
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(ct.index) +
theme_bw()
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw()
hist(rowMeans(X))
hist(log10(rowMeans(X)))
rowMeans(X)
rowMeans(X) %>% min()
dim(X)
rowMeans(X)
X[1,]
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw()
# Null test
is.pb <- FALSE
ct.index <- 1
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw()
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
glm.fit$
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
readRDS("variance_res.rds")
variance_res %>%
ggplot(mapping = aes(x = factor_batch, y = variance_factor)) +
geom_point() +
geom_line() +
scale_y_continuous(trans = 'log10')
variance_res <- readRDS("variance_res.rds")
variance_res %>%
ggplot(mapping = aes(x = factor_batch, y = variance_factor)) +
geom_point() +
geom_line() +
scale_y_continuous(trans = 'log10')
