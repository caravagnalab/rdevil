f <- fits[[name]]
rdevil::test_posterior_ROPE(f, contrast = as.array(c(1,-1)), LFC = 1e-10) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = ROPE) %>%
dplyr::mutate(name = name)
}))
results %>%
filter(!(gene %in% sim$de.genes)) %>%
ggplot(mapping = aes(x=p_value, fill=name, col=name)) +
geom_histogram(bins = 20) +
facet_wrap(~ name)
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
name <- names(fits)[i]
f <- fits[[name]]
get_precision_recall_curve(results %>% dplyr::filter(name == name))
}))
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
name <- names(fits)[i]
get_precision_recall_curve(results %>% dplyr::filter(name == name))
}))
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results %>% dplyr::filter(name == n))
}))
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes)
}))
pr_curves
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes)
}))
pr_curves
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
print(n)
get_precision_recall_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes)
}))
results
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
print(n)
get_precision_recall_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
pr_curves
results_rope
pr_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
pr_curves_rope
all_curves <- dplyr::bind_rows(pr_curves, pr_curves_rope)
all_curves
all_curves$name %>% unique()
AUCs <- lapply(all_curves$name %>% unique(), function(n) {
approximate_AUC(all_curves %>% dplyr::filter(name == n))
})
AUCs
# Compare results
all_curves %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
theme_bw()
AUPRs <- lapply(all_curves$name %>% unique(), function(n) {
approximate_AUC(all_curves %>% dplyr::filter(name == n))
})
AUPRs
all_curves_precision_recall <- dplyr::bind_rows(pr_curves, pr_curves_rope)
AUPRs <- lapply(all_curves_precision_recall$name %>% unique(), function(n) {
approximate_AUC(all_curves %>% dplyr::filter(name == n))
})
AUPRs
all_curves_precision_recall %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
theme_bw()
# ROC
roc_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
roc_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
all_curves_roc <- dplyr::bind_rows(roc_curves, roc_curves_rope)
AUROCs <- lapply(all_curves_roc$name %>% unique(), function(n) {
approximate_AUC(all_curves %>% dplyr::filter(name == n))
})
AUROCs
all_curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
theme_bw()
setwd("~/Desktop/dottorato/rdevil_project/rdevil")
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil")
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(rdevil)
library(magrittr)
library(tidyverse)
source("scripts/metrics.R")
source("scripts/plots.R")
sim <- readRDS("simulations/small_balanced/sim.rds")
X <- sim$counts.data %>% as.matrix()
model_matrix <- model.matrix(~ Group - 1, sim$cell.data)
group_matrix <- model.matrix(~ Batch - 1, sim$cell.data)
colnames(model_matrix)
UMI <- colSums(X) / mean(colSums(X))
glm.fit <- glmGamPoi::glm_gp(X,
design = model_matrix,
on_disk = F,
overdispersion = T,
verbose = T)
glm.results <- glmGamPoi::test_de(glm.fit, contrast = c(1,-1))
colnames(glm.results) <- c("gene", "p_value", "p_val_adj", "f_statistics", "df1", "df2", "avg_log2FC")
rownames(glm.results) <- glm.results$gene
glm.results <- glm.results %>% select(gene, p_value, p_val_adj, avg_log2FC) %>% mutate(name = "glm")
# DEVIL long
long.devil.fit <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = model_matrix,
ncounts = UMI,
gene_names = rownames(X),
cell_names = colnames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(1000L),
lr = 0.1,
gamma_lr = 0.02,
cuda = FALSE,
jit_compile = FALSE,
batch_size = 5120L,
full_cov = TRUE,
prior_loc = 10,
theta_bounds = c(0., 1e16),
init_loc = 10
)
)
# DEVIL long
long.devil.fit <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = model_matrix,
ncounts = UMI,
gene_names = rownames(X),
cell_names = colnames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(1000L),
lr = 0.1,
gamma_lr = 0.02,
cuda = FALSE,
jit_compile = FALSE,
batch_size = 5120L,
full_cov = TRUE,
prior_loc = 10,
theta_bounds = c(0., 1e16),
init_loc = 10,
perc = .5
)
)
long.devil.fit$loss
elbo <- long.devil.fit$loss
zoo::rollmean(elbo, 10)
roll_mean <- zoo::rollmean(elbo, 10)
roll_sd <- zoo::rollapply(elbo, sd, 10)
roll_sd <- zoo::rollapply(elbo, 10, sd)
roll_mean / roll_sd
roll_sd / roll_mean
min(roll_sd / roll_mean)
min(roll_sd / roll_mean) <= 1e-06
roll_sd / roll_mean <= 1e-06
(roll_sd / roll_mean) <= 1e-06
(roll_sd / roll_mean) <= 5e-05
(roll_sd / roll_mean) <= 1e-05
setwd("~/Desktop/dottorato/rdevil_project/rdevil")
library(rdevil)
setwd("~/Desktop/dottorato/biPOD_project/paper/sauer_brenton/scripts/")
rm(list = ls())
library(biPOD)
library(tidyverse)
library(patchwork)
library(ggplot2)
my_ggplot_theme <- function(base_size,
legend.position = "bottom",
title.axis.size=NULL,
text.xaxis.size=NULL,
text.yaxis.size=NULL,
legend.title.size=NULL,
legend.text.size=NULL,
legend.key.size=NULL,
legend.key.width=NULL,
strip.text.size=NULL) {
ggplot2::theme_bw(base_size = base_size) +
ggplot2::theme(
axis.title.x = element_text(size=title.axis.size),
axis.title.y = element_text(size=title.axis.size),
axis.text.x = element_text(size=text.xaxis.size),
axis.text.y = element_text(size=text.yaxis.size),
legend.position = legend.position,
legend.title = element_text(size = legend.title.size),
legend.text = element_text(size = legend.text.size),
legend.key.size = unit(legend.key.size, "cm"),
legend.key.width = unit(legend.key.width, "cm"),
strip.text = element_text(size = strip.text.size),
panel.background = ggplot2::element_rect(fill = "white")
)
}
b_size <- 9
MY_THEME <- my_ggplot_theme(
legend.position = "bottom",
base_size = b_size,
title.axis.size = b_size,
text.xaxis.size = b_size,
text.yaxis.size = b_size,
legend.title.size = b_size - 2,
legend.text.size = b_size - 2,
legend.key.size = .5,
legend.key.width = .5,
strip.text.size = b_size)
MY_THEME_NO_LEG <- my_ggplot_theme(
legend.position = "none",
base_size = b_size,
title.axis.size = b_size,
text.xaxis.size = b_size,
text.yaxis.size = b_size,
legend.title.size = b_size - 2,
legend.text.size = b_size - 2,
legend.key.size = .5,
legend.key.width = .5,
strip.text.size = b_size)
MY_THEME_REP <- my_ggplot_theme(
legend.position = "none",
base_size = b_size,
title.axis.size = b_size,
text.xaxis.size = b_size,
text.yaxis.size = 0,
legend.title.size = b_size - 2,
legend.text.size = b_size - 2,
legend.key.size = .5,
legend.key.width = .5,
strip.text.size = b_size)
# CONSTANTS
CEX_OPT <- 1
treatment_color <- "#af8dc3"
control_color <- "darkgray"
vline_color <- "#333333"
# DATA
patient_id <- 828
data <- read.csv("../data/sauer_brenton_parsed.csv", sep=",") %>% filter(OV04_patient == patient_id)
mouse_ids <- data %>% pull(mouse) %>% unique()
fits <- list()
for (m in mouse_ids) {
f <- readRDS(paste0("../results/fits_", m, ".rds"))
fits[[m]] <- f
}
parameters <- dplyr::tibble()
for (m in mouse_ids) {
x <- fits[[m]]
if (!(is.null(x$metadata$breakpoints))) {
d <- x$breakpoints_fit$draws(c("changing_times[1]", "changing_times[2]"), format = "matrix") %>%
as_tibble()
d[,1:2] <- sapply(d[,1:2], as.numeric)
d <- d %>% mutate(mouse = m)
parameters <- bind_rows(parameters, d)
}
}
# Plot with inferred stuff
median_inferred_changepoints <- parameters %>%
group_by(mouse) %>%
summarise_all(median) %>%
summarise_all(median)
data_plot <- data %>%
dplyr::rename(count = TumourVolume) %>%
dplyr::mutate(time = time / 14) %>%
dplyr::filter(count > 0) %>%
dplyr::mutate(round_count = round(count)) %>%
dplyr::mutate(mouse = factor(mouse)) %>%
dplyr::filter(!((mouse == 541) & (time == 6))) %>%
dplyr::filter(!((mouse == 530) & (round_count == 1688)))
plot_data <- ggplot(data = data_plot, mapping = aes(x=time, y=count, color=Treatment_group., group=mouse, shape=mouse)) +
geom_point() +
geom_line() +
facet_wrap(. ~ Treatment_group., ncol = 1) +
geom_vline(data = data_plot %>% filter(Treatment_group. != "Control"),
mapping = aes(xintercept = median_inferred_changepoints$`changing_times[1]`, col = "Median inferred changpoints"),
linetype = "dashed") +
geom_vline(data = data_plot %>% filter(Treatment_group. != "Control"),
mapping = aes(xintercept = median_inferred_changepoints$`changing_times[2]`, col = "Median inferred changpoints"),
linetype = "dashed") +
scale_color_manual(values = c(control_color, vline_color, treatment_color)) +
scale_fill_manual(values = c(vline_color)) +
scale_shape_manual(values = c(1:19)) +
labs(shape = "", color = "") +
MY_THEME
plot_data
# Report_1
x <- fits[[532]]
f <- plot_simple_fit(x) + MY_THEME_NO_LEG + labs(title = "Control sample - Fit")
g <- plot_normalized_growth_rate_posteriors(x) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
g <- biPOD:::plot_posteriors(x, x$fit, par_list = c("rho[1]"), alpha = .6) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
b <- plot_bayes_factor(x) + MY_THEME_REP + labs(title = "Model selection")
report_1 <- f / g / b +
plot_layout(heights = c(2, 1, .5))
# Report 2
x <- fits[[530]]
f <- plot_simple_fit(x) + MY_THEME_NO_LEG + labs(title = "Treated sample - Fit")
c <- plot_breakpoints_posterior(x, colors = rep("darkgray", length(x$metadata$breakpoints))) +
ggplot2::lims(x = c(min(x$counts$time), max(x$counts$time))) +
ggplot2::labs(x = "time (year)", y = "density", title = "Inferred breakpoints") +
MY_THEME_NO_LEG
g <- plot_normalized_growth_rate_posteriors(x) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
g <- biPOD:::plot_posteriors(x, x$fit, par_list = c("rho[1]", "rho[2]", "rho[3]"), alpha = .6) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
b <- plot_bayes_factor(x) + MY_THEME_REP + labs(title = "Model selection")
report_2 <- f / c / g / b +
plot_layout(heights = c(2,1,1,.5))
report_2
report_1
# Plot growth rates against the other
control_ids <- data %>% filter(Treatment_group. == "Control") %>% pull(mouse) %>% unique()
treatment_ids <- data %>% filter(Treatment_group. != "Control") %>% pull(mouse) %>% unique()
control_parameters <- dplyr::tibble()
for (m in control_ids) {
print(m)
x <- fits[[m]]
d <- x$fit$draws(variables = "rho[1]", format = "matrix") %>% as_tibble()
print(d)
d[,1] <- sapply(d[,1], as.numeric)
d <- d %>% mutate(mouse = m)
control_parameters <- bind_rows(control_parameters, d)
}
treatment_parameters <- dplyr::tibble()
for (m in treatment_ids) {
print(m)
x <- fits[[m]]
d <- x$fit$draws(variables = c("rho[1]", "rho[2]", "rho[3]"), format = "matrix") %>% as_tibble()
print(d)
d[,1:3] <- sapply(d[,1:3], as.numeric)
d <- d %>% mutate(mouse = m)
treatment_parameters <- bind_rows(treatment_parameters, d)
}
control_rho <- control_parameters %>%
group_by(mouse) %>%
summarise_all(median) %>%
mutate(group = "Control") %>%
pivot_longer(!c(mouse, group))
treatment_rho <- treatment_parameters %>%
group_by(mouse) %>%
summarise_all(median) %>%
mutate(group = "Treatment") %>%
pivot_longer(!c(mouse, group))
rho <- bind_rows(control_rho, treatment_rho) %>%
mutate(full_name = paste0(group, name))
parse.labels <- function(x) parse(text = x)
plot_rhos_treatment <- rho %>%
ggplot(mapping = aes(x=full_name, y=value, fill=group)) +
geom_boxplot(alpha = .8) +
geom_hline(yintercept = 0, color = "darkgray", linetype = "dashed") +
scale_fill_manual(values = c(control_color, treatment_color), labels = parse.labels) +
#scale_x_discrete(labels = parse.labels) +
labs(fill="", x="") +
ggpubr::stat_compare_means(comparisons = list(c("Controlrho[1]", "Treatmentrho[1]"), c("Treatmentrho[1]", "Treatmentrho[2]"), c("Treatmentrho[1]", "Treatmentrho[3]")),
label = "p.signif") +
scale_x_discrete(labels = c("Control", "Pre\ntreatement", "Treatment", "Relapse")) +
theme(axis.text.x = element_text(angle = 25, vjust = 0.5, hjust=1)) +
MY_THEME_NO_LEG
plot_rhos_treatment
treated_postueriors <- treatment_parameters %>%
pivot_longer(!mouse) %>%
ggplot(mapping = aes(x=value, fill=name)) +
geom_density(alpha = .5) +
facet_wrap(~ mouse, ncol = 2, scales = "free_y") +
scale_fill_manual(values = biPOD:::get_group_colors()) +
labs(x = bquote(rho), y = "density", title = "Growth rate posteriors of treated samples") +
MY_THEME
treated_postueriors
# Panel
library(patchwork)
plot_data
plot_data
plot_data
ggsave("../img/828_data.svg", width = 850, height = 600, units = "pt")
plot_data
ggsave("../img/828_data.svg")
plot_rhos_treatment
plot_rhos_treatment
ggsave("../img/828_rhos_comparison.svg")
report_1
ggsave("../img/828_control_report.svg")
report_2
ggsave("../img/828_treatment_report.svg")
treated_postueriors
treated_postueriors + MY_THEME_NO_LEG
ggsave("../img/828_rhos_comparison.svg")
report_2
report_1
plot_rhos_treatment
plot_rhos_treatment
ggsave("../img/828_rhos_comparison.svg")
panel <- (plot_data | (plot_rhos_treatment / treated_postueriors)) / (report_1 | report_2) +
plot_layout(widths = c(1,1), heights = c(2,2)) +
plot_annotation(tag_levels = "a")
panel
empty_plot <- ggplot()
row1 <- plot_data | empty_plot
row1
row1 <- plot_data | empty_plot + plot_layout(widths = c(3/4, 1/4))
row1
row1 <- plot_data | empty_plot + plot_layout(widths = c(3, 1))
row1
row1 <- (plot_data | empty_plot) + plot_layout(widths = c(3, 1), heights = c(1))
row1
row2 <- (treated_postueriors | plot_rhos_treatment) + plot_layout(widths = c(1,1), heights = c(1))
row2
row2 <- (treated_postueriors | plot_rhos_treatment) + plot_layout(widths = c(2,1), heights = c(1))
row2
treated_postueriors <- treatment_parameters %>%
pivot_longer(!mouse) %>%
ggplot(mapping = aes(x=value, fill=name)) +
geom_density(alpha = .5) +
facet_wrap(~ mouse, ncol = 2, scales = "free_y") +
scale_fill_manual(values = biPOD:::get_group_colors()) +
labs(x = bquote(rho), y = "density", title = "Growth rate posteriors of treated samples") +
MY_THEME_NO_LEG
treated_postueriors
row2 <- (treated_postueriors | plot_rhos_treatment) + plot_layout(widths = c(2,1), heights = c(1))
row2
row3 <- (report_1 | report_2)
row3
# Report_1
x <- fits[[532]]
f <- plot_simple_fit(x) + MY_THEME_NO_LEG + labs(title = "Control sample - Fit")
g <- plot_normalized_growth_rate_posteriors(x) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
g <- biPOD:::plot_posteriors(x, x$fit, par_list = c("rho[1]"), alpha = .6) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
g
g <- biPOD:::plot_posteriors(x, x$fit, par_list = c("rho[1]"), alpha = .6) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates") + lims(x=c(-0.75, 1))
g
f <- plot_simple_fit(x) + MY_THEME_NO_LEG + labs(title = "Control sample - Fit")
g <- plot_normalized_growth_rate_posteriors(x) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates")
g <- biPOD:::plot_posteriors(x, x$fit, par_list = c("rho[1]"), alpha = .6) + MY_THEME_NO_LEG + labs(x = bquote(rho), y = "normalized density", title = "Growth rates") + lims(x=c(-0.75, 1))
b <- plot_bayes_factor(x) + MY_THEME_REP + labs(title = "Model selection")
report_1 <- f / g / b +
plot_layout(heights = c(2, 1, .5))
row1 <- (plot_data | empty_plot) + plot_layout(widths = c(3, 1), heights = c(1))
row2 <- (treated_postueriors | plot_rhos_treatment) + plot_layout(widths = c(2,1), heights = c(1))
row3 <- (report_1 | report_2)
row3
panel <- (plot_data | (plot_rhos_treatment / treated_postueriors)) / (report_1 | report_2) +
plot_layout(widths = c(1,1), heights = c(2,2)) +
plot_annotation(tag_levels = "a")
(row1 / row2 / row3) + plot_layout(widths = c(1))
(row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1,1,2))
plot_data <- ggplot(data = data_plot, mapping = aes(x=time, y=count, color=Treatment_group., group=mouse, shape=mouse)) +
geom_point() +
geom_line() +
facet_wrap(. ~ Treatment_group., ncol = 1) +
geom_vline(data = data_plot %>% filter(Treatment_group. != "Control"),
mapping = aes(xintercept = median_inferred_changepoints$`changing_times[1]`, col = "Median inferred changpoints"),
linetype = "dashed") +
geom_vline(data = data_plot %>% filter(Treatment_group. != "Control"),
mapping = aes(xintercept = median_inferred_changepoints$`changing_times[2]`, col = "Median inferred changpoints"),
linetype = "dashed") +
scale_color_manual(values = c(control_color, vline_color, treatment_color)) +
scale_fill_manual(values = c(vline_color)) +
scale_shape_manual(values = c(1:19)) +
labs(shape = "", color = "") +
MY_THEME_NO_LEG
plot_data
row1 <- (plot_data | empty_plot) + plot_layout(widths = c(3, 1), heights = c(1))
row2 <- (treated_postueriors | plot_rhos_treatment) + plot_layout(widths = c(2,1), heights = c(1))
row3 <- (report_1 | report_2)
(row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1,1,2))
(row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1,1.2,2))
(row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1,1.2,2)) +
plot_annotation(tag_levels = "a")
(row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1.2,1.2,2)) +
plot_annotation(tag_levels = "a")
(row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1,1.2,2)) +
plot_annotation(tag_levels = "a")
panel <- (row1 / row2 / row3) + plot_layout(widths = c(1), heights = c(1,1.2,2)) +
plot_annotation(tag_levels = "a")
panel
ggsave("../img/panel_828.png", dpi = 600, width = 8.3, height = 11.2, units = "in", plot = panel)
ggsave("../img/panel_828.svg", dpi = 600, width = 8.3, height = 11.2, units = "in", plot = panel)
setwd("~/Desktop/dottorato/biPOD_project/paper/ctDNA")
rm(list = ls())
setwd("~/Desktop/dottorato/biPOD_project/paper/ctDNA")
rm(list = ls())
setwd("~/Desktop/dottorato/biPOD_project/paper/ctDNA")
setwd("~/Desktop/dottorato/biPOD_project/paper/ctDNA")
setwd("~/Desktop/dottorato/biPOD_project/paper/ctDNA")
rm(list = ls())
