for (k in 1:length(sim_paths)) {
p <- sim_paths[k]
print(paste0("Completion = ", 100 * k / length(sim_paths), "%"))
print(p)
sim <- readRDS(p)
# Prepare counts
X <- sim$counts.data %>% as.matrix()
model_matrix <- model.matrix(~ Group, sim$cell.data)
group_matrix <- model.matrix(~ Batch, sim$cell.data)
UMI <- colSums(X) / median(colSums(X))
contrast = as.array(c(0,1))
# Fit data
# Devil
s <- Sys.time()
devil.fit <- devil_fit(X, model_matrix)
e <- Sys.time()
time.devil.fit <- difftime(e, s, units = "secs")
s <- Sys.time()
devil.res <- devil_test(devil.fit, contrast) %>% dplyr::mutate(name = "devil")
e <- Sys.time()
time.devil.test <- difftime(e, s, units = "secs")
# Devil batch
s <- Sys.time()
devil.fit.batch <- devil_fit_w_batch(X, model_matrix, batch_factor = 4)
e <- Sys.time()
time.devil.fit.batch <- difftime(e, s, units = "secs")
s <- Sys.time()
devil.res.batch <- devil_test(devil.fit.batch, contrast) %>% dplyr::mutate(name = "devil")
e <- Sys.time()
time.devil.test.batch <- difftime(e, s, units = "secs")
# Devil batch OneCycleLR
s <- Sys.time()
devil.fit.batch.LR <- devil_fit_w_batch_w_cycleLR(X, model_matrix, batch_factor = 4)
e <- Sys.time()
time.devil.fit.batch.LR <- difftime(e, s, units = "secs")
s <- Sys.time()
devil.res.batch.LR <- devil_test(devil.fit.batch.LR, contrast) %>% dplyr::mutate(name = "devil")
e <- Sys.time()
time.devil.test.batch.LR <- difftime(e, s, units = "secs")
# Glm
s <- Sys.time()
glm.fit <- suppressWarnings(glm_fit(X, model_matrix))
e <- Sys.time()
time.glm.fit <- difftime(e, s, units = "secs")
s <- Sys.time()
glm.res <- suppressWarnings(glm_test(glm.fit, contrast) %>% dplyr::mutate(name = "glm"))
e <- Sys.time()
time.glm.test <- difftime(e, s, units = "secs")
# Mast
s <- Sys.time()
mast.fit <- mast_fit(sim, stats::formula(~ Group))
e <- Sys.time()
time.mast.fit <- difftime(e, s, units = "secs")
s <- Sys.time()
mast.res <- mast_test(mast.fit, "GroupGroup2") %>% dplyr::mutate(name = 'mast')
e <- Sys.time()
time.mast.test <- difftime(e, s, units = "secs")
# Results
results <- list(
"glm" = glm.res,
"devil" = devil.res,
"devil.batch" = devil.res.batch,
"devil.batch.LR" = devil.res.batch.LR,
"mast" = mast.res
)
# Prepare time dataframe
timings <- dplyr::tibble(name = names(results),
time_fit = c(time.glm.fit, time.devil.fit, time.devil.fit.batch, time.devil.fit.batch.LR, time.mast.fit),
time_test = c(time.glm.test, time.devil.test, time.devil.test.batch, time.devil.test.batch.LR, time.mast.test)
) %>%
dplyr::mutate(time_fit = as.numeric(time_fit), time_test = as.numeric(time_test)) %>%
dplyr::mutate(time_total = time_fit + time_test)
# Compute AUPR and AUROC for all models
pr_curves_df <- lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
get_pr_curve_thresholds(res, de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
roc_curves_df <- lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
get_roc_curve_thresholds(res, de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
Fscores <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
fscore <- get_Fscore(res, sim$de.genes, Fscore_cutoff = 0.05, Fscore_beta = 1/2)
dplyr::tibble(name = n, Fscore = fscore)
}) %>% do.call("bind_rows", .)
MCCs <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
mcc <- get_MCC(res, sim$de.genes, p_val_cutoff = .05)
dplyr::tibble(name = n, MCC = mcc)
}) %>% do.call("bind_rows", .)
AUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
aupr = approximate_AUC(pr_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("rbind", .) %>% arrange(- aupr)
AUPRs <- AUPRs %>% dplyr::mutate(aupr = round(aupr, 3))
AUROCs <- lapply(roc_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(roc_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
# Merge general results
full_table <- dplyr::full_join(AUPRs, AUROCs, Fscores, MCCs, by='name') %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
full_table <- dplyr::full_join(full_table, timings, by='name') %>% `rownames<-`(NULL)
# Merge de Results
de_results <- do.call("bind_rows", results)
# Save
nn <- strsplit(strsplit(p, "simulations/")[[1]][2], ".rds")[[1]][1]
ngenes <- as.numeric(strsplit(nn, "_")[[1]][3])
ncells <- as.numeric(strsplit(nn, "_")[[1]][5])
idx_sim <- as.numeric(strsplit(nn, "_")[[1]][6])
full_table <- full_table %>% dplyr::mutate(ngenes = ngenes, ncells=ncells, idx_sim=idx_sim)
de_name <- paste0(path_de_res, nn, "_de.rds")
res_name <- paste0(path_general_res, nn, "_info.rds")
saveRDS(full_table, res_name)
saveRDS(de_results, de_name)
}
k <- 1
p <- sim_paths[k]
print(paste0("Completion = ", 100 * k / length(sim_paths), "%"))
print(p)
sim <- readRDS(p)
# Prepare counts
X <- sim$counts.data %>% as.matrix()
model_matrix <- model.matrix(~ Group, sim$cell.data)
group_matrix <- model.matrix(~ Batch, sim$cell.data)
UMI <- colSums(X) / median(colSums(X))
contrast = as.array(c(0,1))
model_matrix
s <- Sys.time()
glm.res <- suppressWarnings(glm_test(glm.fit, contrast) %>% dplyr::mutate(name = "glm"))
e <- Sys.time()
time.glm.test <- difftime(e, s, units = "secs")
# Glm
s <- Sys.time()
glm.fit <- suppressWarnings(glm_fit(X, model_matrix))
e <- Sys.time()
time.glm.fit <- difftime(e, s, units = "secs")
s <- Sys.time()
glm.res <- suppressWarnings(glm_test(glm.fit, contrast) %>% dplyr::mutate(name = "glm"))
e <- Sys.time()
time.glm.test <- difftime(e, s, units = "secs")
glm_fit(X, model_matrix)
# Glm
s <- Sys.time()
glm.fit <- suppressWarnings(glm_fit(X, model_matrix))
e <- Sys.time()
time.glm.fit <- difftime(e, s, units = "secs")
s <- Sys.time()
time.glm.fit
s <- Sys.time()
glm.res <- suppressWarnings(glm_test(glm.fit, contrast) %>% dplyr::mutate(name = "glm"))
e <- Sys.time()
time.glm.test <- difftime(e, s, units = "secs")
time.glm.test
# Mast
s <- Sys.time()
mast.fit <- mast_fit(sim, stats::formula(~ Group))
e <- Sys.time()
time.mast.fit <- difftime(e, s, units = "secs")
time.mast.fit
s <- Sys.time()
mast.res <- mast_test(mast.fit, "GroupGroup2") %>% dplyr::mutate(name = 'mast')
e <- Sys.time()
time.mast.test <- difftime(e, s, units = "secs")
time.mast.test
# Results
results <- list(
"glm" = glm.res,
"devil" = devil.res,
"devil.batch" = devil.res.batch,
"devil.batch.LR" = devil.res.batch.LR,
"mast" = mast.res
)
# Prepare time dataframe
timings <- dplyr::tibble(name = names(results),
time_fit = c(time.glm.fit, time.devil.fit, time.devil.fit.batch, time.devil.fit.batch.LR, time.mast.fit),
time_test = c(time.glm.test, time.devil.test, time.devil.test.batch, time.devil.test.batch.LR, time.mast.test)
) %>%
dplyr::mutate(time_fit = as.numeric(time_fit), time_test = as.numeric(time_test)) %>%
dplyr::mutate(time_total = time_fit + time_test)
timings
# Compute AUPR and AUROC for all models
pr_curves_df <- lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
get_pr_curve_thresholds(res, de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
roc_curves_df <- lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
get_roc_curve_thresholds(res, de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
Fscores <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
fscore <- get_Fscore(res, sim$de.genes, Fscore_cutoff = 0.05, Fscore_beta = 1/2)
dplyr::tibble(name = n, Fscore = fscore)
}) %>% do.call("bind_rows", .)
MCCs <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
mcc <- get_MCC(res, sim$de.genes, p_val_cutoff = .05)
dplyr::tibble(name = n, MCC = mcc)
}) %>% do.call("bind_rows", .)
AUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
aupr = approximate_AUC(pr_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("rbind", .) %>% arrange(- aupr)
AUPRs <- AUPRs %>% dplyr::mutate(aupr = round(aupr, 3))
AUROCs <- lapply(roc_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(roc_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
# Merge general results
full_table <- dplyr::full_join(AUPRs, AUROCs, Fscores, MCCs, by='name') %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
dplyr::full_join(AUPRs, AUROCs, Fscores, MCCs, by='name')
dplyr::merge(AUPRs, AUROCs, Fscores, MCCs, by='name')
# Merge general results
full_table <- merge(AUPRs, AUROCs, Fscores, MCCs, by='name') %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
merge(AUPRs, AUROCs, Fscores, MCCs, by='name')
MCCs
Fscores
AUROCs
AUPRs
AUROCs
Fscores
MCCs
Fscores <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
fscore <- get_Fscore(res, sim$de.genes, Fscore_cutoff = 0.05, Fscore_beta = 1/2)
dplyr::tibble(Fscore = fscore, name = n)
}) %>% do.call("bind_rows", .)
MCCs <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
mcc <- get_MCC(res, sim$de.genes, p_val_cutoff = .05)
dplyr::tibble(MCC = mcc, name = n)
}) %>% do.call("bind_rows", .)
AUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
aupr = approximate_AUC(pr_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("rbind", .) %>% arrange(- aupr)
AUPRs <- AUPRs %>% dplyr::mutate(aupr = round(aupr, 3))
AUROCs <- lapply(roc_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(roc_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
# Merge general results
full_table <- merge(AUPRs, AUROCs, Fscores, MCCs, by='name') %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
merge(AUPRs, AUROCs, Fscores, MCCs, by='name')
# Merge general results
??merge
dplyr::full_join(AUPRs, AUROCs, by = "name")
# Merge general results
full_table <- dplyr::full_join(dplyr::full_join(AUPRs, AUROCs, by = "name"), dplyr::full_join(Fscores, MCCs, by='name'), by = "name") %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
full_table
full_table <- dplyr::full_join(full_table, timings, by='name') %>% `rownames<-`(NULL)
full_table
# Merge de Results
de_results <- do.call("bind_rows", results)
# Save
nn <- strsplit(strsplit(p, "simulations/")[[1]][2], ".rds")[[1]][1]
ngenes <- as.numeric(strsplit(nn, "_")[[1]][3])
ncells <- as.numeric(strsplit(nn, "_")[[1]][5])
idx_sim <- as.numeric(strsplit(nn, "_")[[1]][6])
full_table <- full_table %>% dplyr::mutate(ngenes = ngenes, ncells=ncells, idx_sim=idx_sim)
de_name <- paste0(path_de_res, nn, "_de.rds")
res_name <- paste0(path_general_res, nn, "_info.rds")
saveRDS(full_table, res_name)
saveRDS(de_results, de_name)
pr_curves_df
recall_cutoff <- 0.5
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
data <- pr_curves_df %>% dplyr::filter(name == n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
pAUPRs
AUROCs <- lapply(roc_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(roc_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
# Merge general results
full_table <- dplyr::full_join(dplyr::full_join(AUPRs, AUROCs, by = "name"), dplyr::full_join(Fscores, MCCs, by='name'), by = "name") %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
full_table <- dplyr::full_join(full_table, timings, by='name') %>% `rownames<-`(NULL)
# Merge de Results
de_results <- do.call("bind_rows", results)
# Save
nn <- strsplit(strsplit(p, "simulations/")[[1]][2], ".rds")[[1]][1]
full_table
full_table <- dplyr::full_join(full_table, pAUPRs, by='name') %>% `rownames<-`(NULL)
full_table
# Merge general results
full_table <- dplyr::full_join(dplyr::full_join(AUPRs, AUROCs, by = "name"), dplyr::full_join(Fscores, MCCs, by='name'), by = "name") %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
full_table <- dplyr::full_join(full_table, pAUPRs, by='name') %>% `rownames<-`(NULL)
full_table <- dplyr::full_join(full_table, timings, by='name') %>% `rownames<-`(NULL)
full_table
pr_curves_df
pr_curves_df %>%
ggplot(mapping = aes(x = x, y=y, col = name)) +
geom_point()
pr_curves_df %>%
ggplot(mapping = aes(x = x, y=y, col = name)) +
geom_point() +
geom_line()
full_table
source("utils/metrics.R")
# Results
results <- list(
"glm" = glm.res,
"devil" = devil.res,
"devil.batch" = devil.res.batch,
"devil.batch.LR" = devil.res.batch.LR,
"mast" = mast.res
)
# Prepare time dataframe
timings <- dplyr::tibble(name = names(results),
time_fit = c(time.glm.fit, time.devil.fit, time.devil.fit.batch, time.devil.fit.batch.LR, time.mast.fit),
time_test = c(time.glm.test, time.devil.test, time.devil.test.batch, time.devil.test.batch.LR, time.mast.test)
) %>%
dplyr::mutate(time_fit = as.numeric(time_fit), time_test = as.numeric(time_test)) %>%
dplyr::mutate(time_total = time_fit + time_test)
# Compute AUPR and AUROC for all models
pr_curves_df <- lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
get_pr_curve_thresholds(res, de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
roc_curves_df <- lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
get_roc_curve_thresholds(res, de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
Fscores <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
fscore <- get_Fscore(res, sim$de.genes, Fscore_cutoff = 0.05, Fscore_beta = 1/2)
dplyr::tibble(Fscore = fscore, name = n)
}) %>% do.call("bind_rows", .)
MCCs <-lapply(names(results), function(n) {
res <- results[[n]] %>% dplyr::select(gene, p_val_adj) %>% na.omit()
mcc <- get_MCC(res, sim$de.genes, p_val_cutoff = .05)
dplyr::tibble(MCC = mcc, name = n)
}) %>% do.call("bind_rows", .)
AUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
aupr = approximate_AUC(pr_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("rbind", .) %>% arrange(- aupr)
AUPRs <- AUPRs %>% dplyr::mutate(aupr = round(aupr, 3))
recall_cutoff <- 0.5
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
data <- pr_curves_df %>% dplyr::filter(name == n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
AUROCs <- lapply(roc_curves_df$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(roc_curves_df %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
# Merge general results
full_table <- dplyr::full_join(dplyr::full_join(AUPRs, AUROCs, by = "name"), dplyr::full_join(Fscores, MCCs, by='name'), by = "name") %>% dplyr::select(name, auroc, aupr, MCC, Fscore) %>% `rownames<-`(NULL)
full_table <- dplyr::full_join(full_table, pAUPRs, by='name') %>% `rownames<-`(NULL)
full_table <- dplyr::full_join(full_table, timings, by='name') %>% `rownames<-`(NULL)
# Merge de Results
de_results <- do.call("bind_rows", results)
full_table
pr_curves_df %>%
ggplot(mapping = aes(x = x, y=y, col = name)) +
geom_point() +
geom_line()
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
#data <- pr_curves_df %>% dplyr::filter(name == n)
data <- get_pr_curve_thresholds(results[[n]], de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
pAUPRs
#data <- pr_curves_df %>% dplyr::filter(name == n)
n <- "devil"
data <- get_pr_curve_thresholds(results[[n]], de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
data
plot(data$x, data$y)
data <- get_precision_recall_curve(results[[n]], de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
results[[n]]
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`("gene", "f"), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`("gene", "f")
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
data
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
v
plot(data$x, data$y)
#data <- pr_curves_df %>% dplyr::filter(name == n)
n <- "devil"
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
ispl
plot(data$x, data$y)
#data <- pr_curves_df %>% dplyr::filter(name == n)
n <- "glm"
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
ispl
plot(data$x, data$y)
recall_cutoff <- 0.5
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
#data <- pr_curves_df %>% dplyr::filter(name == n)
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
pAUPRs
recall_cutoff <- 0.5
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
#data <- pr_curves_df %>% dplyr::filter(name == n)
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
pAUPRs
recall_cutoff <- 0.5
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
#data <- pr_curves_df %>% dplyr::filter(name == n)
data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
pAUPRs
recall_cutoff <- 0.5
pAUPRs <- lapply(pr_curves_df$name %>% unique(), function(n) {
data <- pr_curves_df %>% dplyr::filter(name == n)
# data <- get_precision_recall_curve(results[[n]] %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
ispl <- suppressWarnings(spline(data$x, data$y, xout = c(recall_cutoff), method = 'natural'))
v <- data %>%
dplyr::bind_rows(dplyr::tibble(ispl$x, ispl$y)) %>%
dplyr::arrange(x) %>%
dplyr::filter(x <= .05) %>%
approximate_AUC()
dplyr::tibble(
name = n,
pAUPR = 2 * v
)
}) %>% do.call("rbind", .)
pAUPRs
