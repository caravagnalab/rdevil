ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(ct.index) +
theme_bw()
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw()
hist(rowMeans(X))
hist(log10(rowMeans(X)))
rowMeans(X)
rowMeans(X) %>% min()
dim(X)
rowMeans(X)
X[1,]
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw()
# Null test
is.pb <- FALSE
ct.index <- 1
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .4) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw()
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
glm.fit$
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
readRDS("variance_res.rds")
variance_res %>%
ggplot(mapping = aes(x = factor_batch, y = variance_factor)) +
geom_point() +
geom_line() +
scale_y_continuous(trans = 'log10')
variance_res <- readRDS("variance_res.rds")
variance_res %>%
ggplot(mapping = aes(x = factor_batch, y = variance_factor)) +
geom_point() +
geom_line() +
scale_y_continuous(trans = 'log10')
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
library('variancePartition')
data(varPartDEdata)
#write_csv(X, "../../../nebula_counts.csv")
#write_csv(sample_data$pred, "../../../nebula_meta.csv")
colnames(countMatrix)
rownames(countMatrix)
# Create design matrix
colnames(metadata)
X <- countMatrix
rowMeans(X) %>% min()
design_matrix = model.matrix(~ -0 + DiseaseSubtype + Sex, data=metadata)
group_matrix = model.matrix(~factor(metadata$Individual) - 1)
ids <- metadata$Individual
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4, covariance = TRUE)
contrast = c(0,1,-1,0)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T,
batch_size = 24L,
gauss_loc = 5
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
cov_d
write_csv(X, "../../../counts.csv")
write_csv(X %>% as.data.frame(), "../../../counts.csv")
write_csv(metadata, "../../../meta.csv")
dim(rdevil.fit$params$variance)
write_csv(countMatrix %>% as.data.frame(), "../../../counts.csv")
write_csv(metadata, "../../../meta.csv")
dim(X)
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
library('variancePartition')
data(varPartDEdata)
#write_csv(X, "../../../nebula_counts.csv")
#write_csv(sample_data$pred, "../../../nebula_meta.csv")
colnames(countMatrix)
rownames(countMatrix)
write_csv(countMatrix %>% as.data.frame(), "../../../counts.csv")
write_csv(metadata, "../../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
rowMeans(X) %>% min()
design_matrix = model.matrix(~ -0 + DiseaseSubtype + Sex, data=metadata)
group_matrix = model.matrix(~factor(metadata$Individual) - 1)
ids <- metadata$Individual
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4, covariance = TRUE)
contrast = c(0,1,-1,0)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
library('variancePartition')
data(varPartDEdata)
#write_csv(X, "../../../nebula_counts.csv")
#write_csv(sample_data$pred, "../../../nebula_meta.csv")
colnames(countMatrix)
rownames(countMatrix)
write_csv(countMatrix %>% as.data.frame(), "../../../counts.csv")
write_csv(metadata, "../../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
design_matrix = model.matrix(~ -0 + DiseaseSubtype + Sex, data=metadata)
group_matrix = model.matrix(~factor(metadata$Individual) - 1)
ids <- metadata$Individual
# Nebula fit
nebula.fit <- nebula(X, ids, pred=design_matrix, ncore=4, covariance = TRUE)
contrast = c(0,1,-1,0)
nebula.p.values <- lapply(1:nrow(X), function(gene_i) {
cov= matrix(NA,4,4)
cov[lower.tri(cov,diag=T)] = as.numeric(nebula.fit$covariance[gene_i,])
cov[upper.tri(cov)] = t(cov)[upper.tri(cov)]
## build the contrast vector
## testing the hypothesis
eff = sum(contrast*nebula.fit$summary[gene_i,1:4])
p = pchisq(eff^2/(t(contrast)%*%cov%*%contrast),1,lower.tail=FALSE)
p
}) %>% unlist()
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = 2 * (1 - norm.cdf(np.abs(mu_test), scale = np.sqrt(total_variance)))
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(glm.res$pval, breaks = 100)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(glm.res$pval, breaks = 100)
nebula.fit$overdispersion
rdevil.fit$params$theta
nebula.coeff <- nebula.fit$summary[,1:ncol(design_matrix)]
plot(nebula.fit$overdispersion$Cell, rdevil.fit$params$theta)
plot(nebula.fit$overdispersion$Subject, rdevil.fit$params$theta)
plot(rdevil.fit$params$beta[1,], nebula.coeff[,1])
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "Hessian",
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
# Rdevil fit
rdevil.fit <- rdevil::fit_linear_model(
X,
model_matrix=design_matrix,
variance = "VI_Estimate",
#group_matrix=group_matrix,
method_specific_args = list(
steps=500L,
lr=0.5,
gamma_lr=0.0001,
full_cov=T
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1,-1,0)))
devil.p.values <- lapply(1:nrow(X), function(gene_i) {
eff_d = sum(contrast*rdevil.fit$params$beta[,gene_i])
cov_d = rdevil.fit$params$variance[gene_i,,]
p = pchisq(eff_d^2/(t(contrast)%*%cov_d%*%contrast),1,lower.tail=FALSE)
}) %>% unlist()
#Glm fit
glm.fit <- glmGamPoi::glm_gp(data = X, design = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1,-1,0))
# Compare with NEBULA
gap::qqunif(devil.res$p_value)
gap::qqunif(devil.p.values)
gap::qqunif(nebula.p.values)
gap::qqunif(glm.res$pval)
hist(nebula.p.values, breaks = 100, xlim = c(0,1))
hist(devil.p.values, breaks = 100, xlim = c(0,1))
hist(devil.res$p_value, breaks = 100)
hist(glm.res$pval, breaks = 100)
rm(list = ls())
source("utils/utils.R")
setwd("~/Desktop/dottorato/rdevil_project/de_analysis/nullpower")
rm(list = ls())
source("utils/utils.R")
source("utils/devil.R")
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test")
rm(list = ls())
library(ggplot2)
require(splatter)
require(tidyverse)
source("scripts/metrics.R")
source("scripts/simulations.R")
source("../benchmark_de/de_scripts/devil.R")
source("../benchmark_de/de_scripts/glmGamPoi.R")
sim <- simulate()
gene_data <- sim$gene.data
X <- sim$counts.data %>% as.matrix()
design_matrix <- model.matrix(~ Group, sim$cell.data)
contrast <- as.array(c(0,1))
# "_" means fixed effects, "." means random effects
colnames(X) <- NULL
glm.fit <- glm_fit(counts = X, model_matrix = design_matrix)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = contrast) %>% dplyr::rename(gene = name) %>% dplyr::select(gene, pval, adj_pval, lfc) %>% `colnames<-`(c("gene", "p_value", "p_val_adj", "avg_log2FC"))
batch_factor <- 1
devil.fit.full <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-4,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE
)
)
batch_factor <- 2
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
variance = "Hessian",
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-4,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor)
#full_cov = TRUE,
#prior_loc = 100,
#theta_bounds = c(0.005, 1e9),
#init_loc = 100
)
)
devil.fit.batched <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
variance = "Hessian",
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-4,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor)
#full_cov = TRUE,
#prior_loc = 100,
#theta_bounds = c(0.005, 1e9),
#init_loc = 100
)
)
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$overdispersions, devil.fit.full$params$theta)
plot(glm.fit$overdispersions, devil.fit.batched$params$theta)
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
plot(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.full$params$beta[1,] - devil.fit.full$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.batched$params$beta[1,] - devil.fit.batched$params$beta[2,])
cor.test(glm.fit$Beta[,1] - glm.fit$Beta[,2], devil.fit.full$params$beta[1,] - devil.fit.full$params$beta[2,])
# Look at variances
devil.full.res <- rdevil::test_posterior_null(devil.fit.full, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.batch.res <- rdevil::test_posterior_null(devil.fit.batched, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.full.rope.res <- rdevil::test_posterior_ROPE(devil.fit.full, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.batch.rope.res <- rdevil::test_posterior_ROPE(devil.fit.batched, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.full.rope.res$p_val_adj = stats::p.adjust(devil.full.rope.res$p_val, method = "BH")
devil.batch.rope.res$p_val_adj = stats::p.adjust(devil.batch.rope.res$p_val, method = "BH")
# PRECIOSION vs RECALL
results <- list(
'glm' = glm.res,
'devil.full' = devil.full.res,
'devil.batch' = devil.batch.res
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw()
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw()
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
pr_plot
roc_plot
pr_plot
batch_factor <- 1
devil.fit.full <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(500),
lr = 0.5,
gamma_lr = 1e-10,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE
)
)
