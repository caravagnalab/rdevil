prec_rec_curve_plot
# ROC
roc_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
roc_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
all_curves_roc <- dplyr::bind_rows(roc_curves, roc_curves_rope)
AUROCs <- lapply(all_curves_roc$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(all_curves_roc %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
roc_curves_plot <- all_curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
scale_color_manual(values = COLORS) +
theme_bw() +
theme(legend.position = "top")
roc_curves_plot
# PARAMETERS comparison long
devil.fit <- long.devil.fit
unique(results$name)
devil.results <- results %>% dplyr::filter(name == "long")
d <- dplyr::tibble(
gene = rownames(devil.fit$params$beta),
devil_beta1 = devil.fit$params$beta[1,],
glm_beta1 = glm.fit$Beta[,1],
devil_beta2 = devil.fit$params$beta[2,],
glm_beta2 = glm.fit$Beta[,2],
devil_disperision = devil.fit$params$theta,
glm_dispersion = glm.fit$overdispersions,
devil_lfc = devil.results$avg_log2FC,
glm_lfc = glm.results$avg_log2FC,
devil_pval = devil.results$p_val_adj,
glm_pval = glm.results$p_val_adj
)
d
d <- d %>%
#dplyr::mutate(devil_pval = ifelse(devil_pval == 0, 1e-300, devil_pval)) %>%
#dplyr::mutate(glm_pval = ifelse(glm_pval == 0, 1e-300, glm_pval)) %>%
dplyr::mutate(glm_log_pval = -log10(glm_pval), devil_log_pval = -log10(devil_pval))
beta_cor_long <- plot_correlation(d, "devil_beta1", "glm_beta1") + ggtitle("beta1")
beta2_cor_long <- plot_correlation(d, "devil_beta2", "glm_beta2") + ggtitle("beta2")
dispersion_cor_long <- plot_correlation(d, "devil_disperision", "glm_dispersion") + ggtitle("dispersion")
lfc_cor_long <- plot_correlation(d, "devil_lfc", "glm_lfc") + ggtitle("lfc_cor")
pval_cor_long <- plot_correlation(d, "devil_pval", "glm_pval") + ggtitle("p_value")
log_pval_cor_long <- plot_correlation(d, "devil_log_pval", "glm_log_pval") + ggtitle("log p_value")
dispersion_cor_long
lfc_cor_long
pval_cor_long
log_pval_cor_long
library(rdevil)
source("~/Desktop/dottorato/rdevil_project/rdevil_test/test_param_set.R", echo=TRUE)
fits <- list(
"glm" = glm.fit,
"long" = long.devil.fit,
"auto" = auto.devil.fit
)
results <- do.call("bind_rows", lapply(2:length(fits), function(i) {
name <- names(fits)[i]
f <- fits[[name]]
rdevil::test_posterior_null(f, contrast = as.array(c(1,-1))) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj) %>%
dplyr::mutate(name = name)
})) %>% dplyr::bind_rows(glm.results)
results_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
name <- names(fits)[i]
f <- fits[[name]]
rdevil::test_posterior_ROPE(f, contrast = as.array(c(1,-1)), LFC = 1e-10) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = ROPE) %>%
dplyr::mutate(name = name)
}))
p_value_null_plot <- results %>%
filter(!(gene %in% sim$de.genes)) %>%
ggplot(mapping = aes(x=p_value, fill=name, col=name)) +
geom_histogram(bins = 20) +
facet_wrap(~ name) +
theme_bw() +
theme(legend.direction='horizontal')
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
pr_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
all_curves_precision_recall <- dplyr::bind_rows(pr_curves, pr_curves_rope)
AUPRs <- lapply(all_curves_precision_recall$name %>% unique(), function(n) {
dplyr::tibble(
aupr = approximate_AUC(all_curves_precision_recall %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("rbind", .) %>% arrange(- aupr)
AUPRs <- AUPRs %>% dplyr::mutate(aupr = round(aupr, 3))
AUPRs
prec_rec_curve_plot <- all_curves_precision_recall %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
scale_color_manual(values = COLORS) +
theme_bw() +
theme(legend.position = "none")
prec_rec_curve_plot
# ROC
roc_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
roc_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
all_curves_roc <- dplyr::bind_rows(roc_curves, roc_curves_rope)
AUROCs <- lapply(all_curves_roc$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(all_curves_roc %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs
roc_curves_plot <- all_curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
scale_color_manual(values = COLORS) +
theme_bw() +
theme(legend.position = "top")
roc_curves_plot
# PARAMETERS comparison long
devil.fit <- long.devil.fit
unique(results$name)
devil.results <- results %>% dplyr::filter(name == "long")
d <- dplyr::tibble(
gene = rownames(devil.fit$params$beta),
devil_beta1 = devil.fit$params$beta[1,],
glm_beta1 = glm.fit$Beta[,1],
devil_beta2 = devil.fit$params$beta[2,],
glm_beta2 = glm.fit$Beta[,2],
devil_disperision = devil.fit$params$theta,
glm_dispersion = glm.fit$overdispersions,
devil_lfc = devil.results$avg_log2FC,
glm_lfc = glm.results$avg_log2FC,
devil_pval = devil.results$p_val_adj,
glm_pval = glm.results$p_val_adj
)
d
d <- d %>%
#dplyr::mutate(devil_pval = ifelse(devil_pval == 0, 1e-300, devil_pval)) %>%
#dplyr::mutate(glm_pval = ifelse(glm_pval == 0, 1e-300, glm_pval)) %>%
dplyr::mutate(glm_log_pval = -log10(glm_pval), devil_log_pval = -log10(devil_pval))
beta_cor_long <- plot_correlation(d, "devil_beta1", "glm_beta1") + ggtitle("beta1")
beta2_cor_long <- plot_correlation(d, "devil_beta2", "glm_beta2") + ggtitle("beta2")
dispersion_cor_long <- plot_correlation(d, "devil_disperision", "glm_dispersion") + ggtitle("dispersion")
lfc_cor_long <- plot_correlation(d, "devil_lfc", "glm_lfc") + ggtitle("lfc_cor")
pval_cor_long <- plot_correlation(d, "devil_pval", "glm_pval") + ggtitle("p_value")
log_pval_cor_long <- plot_correlation(d, "devil_log_pval", "glm_log_pval") + ggtitle("log p_value")
beta_cor_long
beta2_cor_long
dispersion_cor_long
lfc_cor_long
pval_cor_long
log_pval_cor_long
# PARAMETERS comparison auto
devil.fit <- auto.devil.fit
devil.results <- results %>% dplyr::filter(name == "auto")
d <- dplyr::tibble(
gene = rownames(sim$counts.data),
devil_beta1 = devil.fit$params$beta[1,],
glm_beta1 = glm.fit$Beta[,1],
devil_beta2 = devil.fit$params$beta[2,],
glm_beta2 = glm.fit$Beta[,2],
devil_disperision = devil.fit$params$theta,
glm_dispersion = glm.fit$overdispersions,
devil_lfc = devil.results$avg_log2FC,
glm_lfc = glm.results$avg_log2FC,
devil_pval = devil.results$p_val_adj,
glm_pval = glm.results$p_val_adj
)
d
d <- d %>%
#dplyr::mutate(devil_pval = ifelse(devil_pval == 0, 1e-300, devil_pval)) %>%
#dplyr::mutate(glm_pval = ifelse(glm_pval == 0, 1e-300, glm_pval)) %>%
dplyr::mutate(glm_log_pval = -log10(glm_pval), devil_log_pval = -log10(devil_pval))
beta_cor_auto <- plot_correlation(d, "devil_beta1", "glm_beta1")
beta2_cor_auto <- plot_correlation(d, "devil_beta2", "glm_beta2")
dispersion_cor_auto <- plot_correlation(d, "devil_disperision", "glm_dispersion")
lfc_cor_auto <- plot_correlation(d, "devil_lfc", "glm_lfc")
pval_cor_auto <- plot_correlation(d, "devil_pval", "glm_pval")
log_pval_cor_auto <- plot_correlation(d, "devil_log_pval", "glm_log_pval")
# Prepare panel
full_table <- dplyr::full_join(AUPRs, AUROCs, by = 'name') %>%
dplyr::select(name, auroc, aupr) %>%
`rownames<-`(NULL)
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
row1 <- (roc_curves_plot | prec_rec_curve_plot)
row2 <- (p_value_null_plot | table_grob) + plot_layout(widths = c(2,1))
row3 <- (beta_cor_long | beta2_cor_long | dispersion_cor_long | lfc_cor_long | pval_cor_long)
row4 <- (beta_cor_auto | beta2_cor_auto | dispersion_cor_auto | lfc_cor_auto | pval_cor_auto)
plot_title = paste0("LR = ", LR, "    Gamma_lr = ", GAMMA_LR, "    ", OPTIM, "    steps = ", STEPS)
file_name = paste0("LR_", LR, "_G_LR_", GAMMA_LR, "_", OPTIM, "_steps_", STEPS, ".pdf")
ratio_auto = length(auto.devil.fit$loss) / length(devil.fit$loss)
panel <- row1 / guide_area() / row2 / row3 / row4 +
plot_layout(heights = c(1.5,1, 1,1,1), guides = 'collect') +
plot_annotation(title = plot_title, subtitle = paste0("ratio auto over full = ", ratio_auto))
panel
ggsave(paste0("results/reports/", file_name), dpi = 500, width = 8.3, height = 11.7, units = 'in', plot = panel)
source("~/Desktop/dottorato/rdevil_project/rdevil_test/test_param_set.R", echo=TRUE)
length(auto.devil.fit$loss)
length(long.devil.fit)
long.devil.fit$loss
auto.devil.fit$loss
results <- do.call("bind_rows", lapply(2:length(fits), function(i) {
name <- names(fits)[i]
f <- fits[[name]]
rdevil::test_posterior_null(f, contrast = as.array(c(1,-1))) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj) %>%
dplyr::mutate(name = name)
})) %>% dplyr::bind_rows(glm.results)
results_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
name <- names(fits)[i]
f <- fits[[name]]
rdevil::test_posterior_ROPE(f, contrast = as.array(c(1,-1)), LFC = 1e-10) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = ROPE) %>%
dplyr::mutate(name = name)
}))
p_value_null_plot <- results %>%
filter(!(gene %in% sim$de.genes)) %>%
ggplot(mapping = aes(x=p_value, fill=name, col=name)) +
geom_histogram(bins = 20) +
facet_wrap(~ name) +
theme_bw() +
theme(legend.direction='horizontal')
# PRECISION vs RECALL
pr_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
pr_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_precision_recall_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
all_curves_precision_recall <- dplyr::bind_rows(pr_curves, pr_curves_rope)
AUPRs <- lapply(all_curves_precision_recall$name %>% unique(), function(n) {
dplyr::tibble(
aupr = approximate_AUC(all_curves_precision_recall %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("rbind", .) %>% arrange(- aupr)
AUPRs <- AUPRs %>% dplyr::mutate(aupr = round(aupr, 3))
prec_rec_curve_plot <- all_curves_precision_recall %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
scale_color_manual(values = COLORS) +
theme_bw() +
theme(legend.position = "none")
prec_rec_curve_plot
# ROC
roc_curves <- do.call("bind_rows", lapply(1:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = n)
}))
roc_curves_rope <- do.call("bind_rows", lapply(2:length(fits), function(i) {
n <- names(fits)[i]
get_roc_curve(results_rope %>% dplyr::filter(name == n) %>% dplyr::select(gene, p_val_adj) %>% `colnames<-`(c("gene", "f")),
de.genes = sim$de.genes) %>%
mutate(name = paste0(n, "_rope"))
}))
all_curves_roc <- dplyr::bind_rows(roc_curves, roc_curves_rope)
AUROCs <- lapply(all_curves_roc$name %>% unique(), function(n) {
dplyr::tibble(
auroc = approximate_AUC(all_curves_roc %>% dplyr::filter(name == n)),
name = n
)
}) %>% do.call("bind_rows", .) %>% arrange(- auroc)
AUROCs <- AUROCs %>% dplyr::mutate(auroc = round(auroc, 3))
roc_curves_plot <- all_curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_line() +
scale_color_manual(values = COLORS) +
theme_bw() +
theme(legend.position = "top")
roc_curves_plot
# PARAMETERS comparison long
devil.fit <- long.devil.fit
unique(results$name)
devil.results <- results %>% dplyr::filter(name == "long")
d <- dplyr::tibble(
gene = rownames(devil.fit$params$beta),
devil_beta1 = devil.fit$params$beta[1,],
glm_beta1 = glm.fit$Beta[,1],
devil_beta2 = devil.fit$params$beta[2,],
glm_beta2 = glm.fit$Beta[,2],
devil_disperision = devil.fit$params$theta,
glm_dispersion = glm.fit$overdispersions,
devil_lfc = devil.results$avg_log2FC,
glm_lfc = glm.results$avg_log2FC,
devil_pval = devil.results$p_val_adj,
glm_pval = glm.results$p_val_adj
)
d
d <- d %>%
#dplyr::mutate(devil_pval = ifelse(devil_pval == 0, 1e-300, devil_pval)) %>%
#dplyr::mutate(glm_pval = ifelse(glm_pval == 0, 1e-300, glm_pval)) %>%
dplyr::mutate(glm_log_pval = -log10(glm_pval), devil_log_pval = -log10(devil_pval))
beta_cor_long <- plot_correlation(d, "devil_beta1", "glm_beta1") + ggtitle("beta1")
beta2_cor_long <- plot_correlation(d, "devil_beta2", "glm_beta2") + ggtitle("beta2")
dispersion_cor_long <- plot_correlation(d, "devil_disperision", "glm_dispersion") + ggtitle("dispersion")
lfc_cor_long <- plot_correlation(d, "devil_lfc", "glm_lfc") + ggtitle("lfc_cor")
pval_cor_long <- plot_correlation(d, "devil_pval", "glm_pval") + ggtitle("p_value")
log_pval_cor_long <- plot_correlation(d, "devil_log_pval", "glm_log_pval") + ggtitle("log p_value")
# PARAMETERS comparison auto
devil.fit <- auto.devil.fit
devil.results <- results %>% dplyr::filter(name == "auto")
d <- dplyr::tibble(
gene = rownames(sim$counts.data),
devil_beta1 = devil.fit$params$beta[1,],
glm_beta1 = glm.fit$Beta[,1],
devil_beta2 = devil.fit$params$beta[2,],
glm_beta2 = glm.fit$Beta[,2],
devil_disperision = devil.fit$params$theta,
glm_dispersion = glm.fit$overdispersions,
devil_lfc = devil.results$avg_log2FC,
glm_lfc = glm.results$avg_log2FC,
devil_pval = devil.results$p_val_adj,
glm_pval = glm.results$p_val_adj
)
d
d <- d %>%
#dplyr::mutate(devil_pval = ifelse(devil_pval == 0, 1e-300, devil_pval)) %>%
#dplyr::mutate(glm_pval = ifelse(glm_pval == 0, 1e-300, glm_pval)) %>%
dplyr::mutate(glm_log_pval = -log10(glm_pval), devil_log_pval = -log10(devil_pval))
beta_cor_auto <- plot_correlation(d, "devil_beta1", "glm_beta1")
beta2_cor_auto <- plot_correlation(d, "devil_beta2", "glm_beta2")
dispersion_cor_auto <- plot_correlation(d, "devil_disperision", "glm_dispersion")
lfc_cor_auto <- plot_correlation(d, "devil_lfc", "glm_lfc")
pval_cor_auto <- plot_correlation(d, "devil_pval", "glm_pval")
log_pval_cor_auto <- plot_correlation(d, "devil_log_pval", "glm_log_pval")
# Prepare panel
full_table <- dplyr::full_join(AUPRs, AUROCs, by = 'name') %>%
dplyr::select(name, auroc, aupr) %>%
`rownames<-`(NULL)
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
row1 <- (roc_curves_plot | prec_rec_curve_plot)
row2 <- (p_value_null_plot | table_grob) + plot_layout(widths = c(2,1))
row3 <- (beta_cor_long | beta2_cor_long | dispersion_cor_long | lfc_cor_long | pval_cor_long)
row4 <- (beta_cor_auto | beta2_cor_auto | dispersion_cor_auto | lfc_cor_auto | pval_cor_auto)
plot_title = paste0("LR = ", LR, "    Gamma_lr = ", GAMMA_LR, "    ", OPTIM, "    steps = ", STEPS)
file_name = paste0("LR_", LR, "_G_LR_", GAMMA_LR, "_", OPTIM, "_steps_", STEPS, ".pdf")
ratio_auto = length(auto.devil.fit$loss) / length(long.devil.fit)
panel <- row1 / guide_area() / row2 / row3 / row4 +
plot_layout(heights = c(1.5,1, 1,1,1), guides = 'collect') +
plot_annotation(title = plot_title, subtitle = paste0("ratio auto over full = ", ratio_auto))
panel
length(auto.devil.fit$loss) / length(long.devil.fit$loss)
source("~/Desktop/dottorato/rdevil_project/rdevil_test/test_param_set.R", echo=TRUE)
LR <- .1
GAMMA_LR <- .1
OPTIM <- "ClippedAdam"
STEPS <- 1000L
THRES <- 10e-3
sim <- readRDS("simulations/small_balanced/sim.rds")
X <- sim$counts.data %>% as.matrix()
model_matrix <- model.matrix(~ Group - 1, sim$cell.data)
group_matrix <- model.matrix(~ Batch - 1, sim$cell.data)
UMI <- colSums(X) / mean(colSums(X))
glm.fit <- suppressWarnings(
glmGamPoi::glm_gp(X,
design = model_matrix,
on_disk = F,
overdispersion = T,
verbose = T)
)
glm.results <- suppressWarnings(glmGamPoi::test_de(glm.fit, contrast = c(1,-1)))
colnames(glm.results) <- c("gene", "p_value", "p_val_adj", "f_statistics", "df1", "df2", "avg_log2FC")
rownames(glm.results) <- glm.results$gene
glm.results <- glm.results %>% select(gene, p_value, p_val_adj, avg_log2FC) %>% mutate(name = "glm")
auto.devil.fit <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = model_matrix,
ncounts = UMI,
gene_names = rownames(X),
cell_names = colnames(X),
method_specific_args = list(
optimizer_name = OPTIM,
steps = as.integer(STEPS),
lr = LR,
gamma_lr = GAMMA_LR,
cuda = TRUE,
jit_compile = FALSE,
batch_size = as.integer(nrow(model_matrix)),
full_cov = TRUE,
prior_loc = 10,
theta_bounds = c(0., 1e16),
init_loc = 10,
threshold = THRESH
)
)
THRES <- 1e-1
auto.devil.fit <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = model_matrix,
ncounts = UMI,
gene_names = rownames(X),
cell_names = colnames(X),
method_specific_args = list(
optimizer_name = OPTIM,
steps = as.integer(STEPS),
lr = LR,
gamma_lr = GAMMA_LR,
cuda = TRUE,
jit_compile = FALSE,
batch_size = as.integer(nrow(model_matrix)),
full_cov = TRUE,
prior_loc = 10,
theta_bounds = c(0., 1e16),
init_loc = 10,
threshold = THRESH
)
)
setwd("~/Desktop/dottorato/rdevil_project/rdevil_test/results")
rm(list=ls())
source("../scripts/plots.R")
library(tidyverse)
library(ggplot2)
library(bench)
# Benchmarks ####
benchmark_4k <- readRDS("timing/benchmark_pbmc4k.rds")
benchmark_4k$time
benchmark_68k <- readRDS("timing/benchmark_pbmc68k.rds")
benchmark_4k[1,]$time
res <- lapply(1:nrow(benchmark_68k), function(i) {
times <- benchmark_68k[i,]$time %>% unlist()
dplyr::tibble(t = times, i = i, exp = benchmark_68k[i,]$expression)
}) %>% do.call("bind_rows", .)
names(res$exp)
res %>%
mutate(exp = names(exp)) %>%
filter((grepl("glmGam", exp) | grepl("total", exp))) %>%
mutate(exp = factor(exp)) %>%
ggplot(mapping = aes(x=exp, y=t, fill=exp)) +
geom_boxplot() +
#ylim(0, NA) +
coord_flip() +
theme_bw() +
scale_fill_manual(
values = c("indianred", "steelblue", "goldenrod", "forestgreen"),
labels = c("glmGamPoi RAM", "glmGamPoi on disk", "DEVIL short", "DEVIL long")
) +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
labs(y = "time (seconds)", x = "", title = "pbmc68k", fill = "")
ggplot2::autoplot(benchmark_4k, type = "boxplot") + labs(title = "pbmc4k")
ggsave("../img/timing/benchmark_4k.png", dpi = 400, width = 10, height = 5)
ggplot2::autoplot(benchmark_68k, type = "boxplot") + labs(title = "pbmc68k")
ggsave("../img/timing/benchmark_68k.png", dpi = 400, width = 10, height = 5)
# Analyze correlation 4k
glm.fit <- readRDS("timing/glm_fit_pbmc4k.rds")
file_list <- list.files("timing/")[grep("pbmc4k", list.files("timing/"))]
file_list <- file_list[grep("devil", file_list)]
for (f in file_list) {
print(f)
splits <- (strsplit(f, "_")) %>% unlist()
pdf_file_name = paste0("../img/timing/report_pbmc4k_", splits[3], "_", splits[4], ".pdf")
pdf(pdf_file_name, width = 5, height = 5)
devil.fit <- readRDS(paste0("timing/", f))
print(cor.test(devil.fit$params$beta[1,], glm.fit$Beta[,1]))
print(plot_correlation(
df = dplyr::tibble(x=devil.fit$params$beta[1,] , y=glm.fit$Beta[,1]), x_name = "x", y_name = "y"
) + labs(x = "devil", y = "glm", title = "beta"))
print(cor.test(1 / devil.fit$params$theta, glm.fit$overdispersions))
print(plot_correlation(
df = dplyr::tibble(x=1 / devil.fit$params$theta , y=glm.fit$overdispersions), x_name = "x", y_name = "y"
) + labs(x = "devil", y = "glm", title = "overdispersion"))
#print(plot_correlation(
#  df = dplyr::tibble(x=c(t(devil.fit$params$eta)) , y=c(glm.fit$Mu)), x_name = "x", y_name = "y"
#) + labs(x = "devil", y = "glm", title = "mean expression"))
dev.off()
}
setwd("~/Desktop/dottorato/rdevil_project/rdevil")
