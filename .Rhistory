write.csv(metadata, file = "../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
ngene <- 10
X <- X[1:ngene,]
metadata$fake <- rnorm(nrow(metadata), mean = 0, sd = 1e-6)
design_matrix = model.matrix(~ 1+tx_cell+fake, data=metadata)
group_matrix <- matrix(0, nrow = dim(X)[2], ncol=length(unique(metadata$id))) %>%
`colnames<-`(unique(metadata$id))
for (g in colnames(group_matrix)) {
group_matrix[,g] = (metadata$id == g) * 1
}
write.csv(group_matrix, file = "../../group_matrix.csv")
ids <- metadata$id
# Nebula fit
nebula.fit <- nebula::nebula(X %>% as.matrix(), ids, pred=model.matrix(~~1+tx_cell+fake, data=metadata), cpc=0, mincp=0, covariance = T, output_re = T)
hist(nebula.fit$summary$p_tx_cell, breaks = 100)
# Rdevil fit
design_matrix <- model.matrix(~~1+tx_cell, data=metadata)
rdevil.fit <- rdevil::fit_linear_model(
X %>% as.matrix(),
model_matrix=design_matrix,
variance = "VI_Estimate",
size_factors = FALSE,
#group_matrix=group_matrix,
method_specific_args = list(
steps=1000L,
lr=0.5,
gamma_lr=1e-6,
full_cov=T,
gauss_loc = 5,
disp_loc = 3,
batch_size = 10000L
)
)
devil.res <- rdevil::test_posterior_null(rdevil.fit, as.array(c(0,1)))
# compute p values clustered
p_values_cov_CL <- lapply(1:ngene, function(gene_idx) {
print(gene_idx)
y <- X[gene_idx,]
mass.fit <- MASS::glm.nb(y~1+tx_cell, data = data.frame(y, metadata))
old_cl_cov <- sandwich::vcovCL(mass.fit, cluster = metadata$id)
cl_cov <- sandwich::vcovCL(mass.fit, group_matrix)
contrast = c(0,1)
eff_d = sum(contrast * mass.fit$coefficients)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cl_cov%*%contrast)),1,lower.tail=FALSE)
p = pchisq(eff_d^2/(sum(t(contrast)%*%old_cl_cov%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
# compute p values clustered
p_values_cov_CL <- lapply(1:ngene, function(gene_idx) {
print(gene_idx)
y <- X[gene_idx,]
mass.fit <- MASS::glm.nb(y~1+tx_cell, data = data.frame(y, metadata))
cl_cov <- sandwich::vcovCL(mass.fit, cluster = metadata$id)
contrast = c(0,1)
eff_d = sum(contrast * mass.fit$coefficients)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cl_cov%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
plot(p_values_cov_CL, nebula.fit$summary$p_tx_cell)
p_values_cov_CL
nebula.fit$summary$p_tx_cell
my_estfun <- function(design_matrix, y, beta, alpha) {
xmat <- design_matrix
mu <- exp(xmat %*% beta)
r <- c((y - mu) / mu)
v <- mu + mu^2 / alpha
w <- c(mu^2 / v)
xmat * r * w
}
my_meatCL <- function(design_matrix, y, beta, alpha, cluster) {
ef <- my_estfun(design_matrix, y, beta, alpha)
k <- NCOL(ef)
n <- NROW(ef)
rval <- matrix(0, nrow = k, ncol = k, dimnames = list(colnames(ef), colnames(ef)))
if (is.null(cluster)) cluster <- 1L:n
if (is.null(cluster)) stop("Cluster not specified.")
cluster <- as.data.frame(cluster)
if (NROW(cluster) != n) stop("Number of observations in 'cluster' and 'estfun()' do not match")
if (anyNA(cluster)) stop("Cannot handle NAs in 'cluster'")
cl <- list(1)
sign <- 1
g <- sapply(1L:length(cl), function(i) length(levels(cluster[[i]])))
for (i in 1L:length(cl)) {
efi <- ef
adj <- if (g[i] > 1) g[i] / (g[i] - 1L) else 1
efi <- if (g[i] < n) apply(efi, 2L, rowsum, cluster[[i]]) else efi
rval <- rval + sign[i] * adj * crossprod(efi) / n
}
return(rval)
}
my_bread <- function(design_matrix, y, beta, alpha, size_factors) {
H = matrix(nrow = dim(design_matrix)[2], ncol = dim(design_matrix)[2], data = 0)
obs <- y
# with respect to beta
for (sample_idx in 1:length(obs)) {
yi <- obs[sample_idx]
sf <- size_factors[sample_idx]
design_v <- design_matrix[sample_idx,]
xij <- design_v %*% t(design_v)
k = sf * exp(design_matrix[sample_idx,] %*% beta) %>% as.numeric()
gamma_sq = (1 + alpha * k)**2 %>% as.numeric()
new_term <- - (yi * alpha + 1) * xij * k / gamma_sq
H[1:ncol(design_matrix),1:ncol(design_matrix)] <- H[1:ncol(design_matrix),1:ncol(design_matrix)] + new_term
}
solve(-H) * nrow(design_matrix)
}
my_covCL <- function(design_matrix, y, beta, alpha, cluster) {
meat <- my_meatCL(design_matrix, y, beta, alpha, cluster)
bread <- my_bread(design_matrix, y, beta, alpha, size_factors = rep(1, nrow(design_matrix)))
}
p_values_sandwich <- lapply(1:ngene, function(gene_idx) {
y <- X[gene_idx,]
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
m <- my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
b <- my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
cov <- (b %*% m %*% b) / nrow(design_matrix)
contrast = c(0,1)
eff_d = sum(contrast * beta)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
p_values_sandwich_v2 <- lapply(1:ngene, function(gene_idx) {
y <- X[gene_idx,]
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
m <- my_meatCL_v2(design_matrix, y, beta, 1/alpha, metadata$id)
b <- my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
cov <- (b %*% m %*% b) / nrow(design_matrix)
contrast = c(0,1)
eff_d = sum(contrast * beta)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
plot(p_values_cov_CL, p_values_sandwich)
p_values_sandwich
p_values_cov_CL
nebula_res <- dplyr::tibble(p_val = nebula.fit$summary$p_tx_cell) %>%
dplyr::mutate(name = "nebula") %>%
dplyr::mutate(gene = dplyr::row_number())
nebula_res$p_val_adj = stats::p.adjust(nebula_res$p_val, method = "BH")
meat_res <- dplyr::tibble(p_val = p_values_cov_CL) %>%
dplyr::mutate(name="meat") %>%
dplyr::mutate(gene = dplyr::row_number())
meat_res$p_val_adj = stats::p.adjust(meat_res$p_val, method = "BH")
devil_res <- dplyr::tibble(p_val = p_values_sandwich) %>%
dplyr::mutate(name="devil_meat") %>%
dplyr::mutate(gene = dplyr::row_number())
devil_res$p_val_adj = stats::p.adjust(devil_res$p_val, method = "BH")
res <- dplyr::bind_rows(nebula_res, meat_res, devil_res)
res %>%
dplyr::filter(gene > (as.integer(nrow(data$count) * .05))) %>%
dplyr::mutate(x = (gene - min(gene)) / (max(gene) - min(gene))) %>%
ggplot(mapping = aes(x = p_val_adj, col = name, fill=name)) +
geom_histogram() +
facet_wrap(~ name)
my_bread(design_matrix, y = X[gene_idx,], beta = rdevil.fit$params$beta[,gene_idx])
# check comparisons ####
gene_idx <- 1
my_bread(design_matrix, y = X[gene_idx,], beta = rdevil.fit$params$beta[,gene_idx])
y <- X[gene_idx,]
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
m <- my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
m
b <- my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
b
rdevil.fit$params$size_factors
my_bread(
design_matrix,
y = X[gene_idx,],
beta = rdevil.fit$params$beta[,gene_idx],
alpha = rdevil.fit$params$theta[gene_idx],
size_factors = rdevil.fit$params$size_factors
)
beta <- rdevil.fit$params$beta[,gene_idx]
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
beta
alpha
my_bread(
design_matrix,
y = X[gene_idx,],
beta = rdevil.fit$params$beta[,gene_idx],
alpha = rdevil.fit$params$theta[gene_idx],
size_factors = rdevil.fit$params$size_factors
)
alpha
y
my_bread(
design_matrix,
y = X[gene_idx,],
beta = rdevil.fit$params$beta[,gene_idx],
alpha = rdevil.fit$params$theta[gene_idx],
size_factors = rdevil.fit$params$size_factors
)
beta
alpha
my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
my_estfun(design_matrix, X[gene_idx,], beta, alpha)
my_estfun(design_matrix, X[gene_idx,], beta, alpha)
my_estfun(design_matrix, X[gene_idx,], beta, alpha)[497,]
xmat <- design_matrix
mu <- exp(xmat %*% beta)
r <- c((y - mu) / mu)
mu
v <- mu + mu^2 / alpha
w <- c(mu^2 / v)
xmat
r
w
my_estfun(design_matrix, X[gene_idx,], beta, alpha)[497,]
ef <- my_estfun(design_matrix, y, beta, alpha)
k <- NCOL(ef)
n <- NROW(ef)
rval <- matrix(0, nrow = k, ncol = k, dimnames = list(colnames(ef), colnames(ef)))
rval
ef <- my_estfun(design_matrix, y, beta, alpha)
k <- NCOL(ef)
n <- NROW(ef)
rval <- matrix(0, nrow = k, ncol = k, dimnames = list(colnames(ef), colnames(ef)))
if (is.null(cluster)) cluster <- 1L:n
cluster <- metadata$id
ef <- my_estfun(design_matrix, y, beta, alpha)
k <- NCOL(ef)
n <- NROW(ef)
rval <- matrix(0, nrow = k, ncol = k, dimnames = list(colnames(ef), colnames(ef)))
if (is.null(cluster)) cluster <- 1L:n
if (is.null(cluster)) stop("Cluster not specified.")
cluster <- as.data.frame(cluster)
if (NROW(cluster) != n) stop("Number of observations in 'cluster' and 'estfun()' do not match")
if (anyNA(cluster)) stop("Cannot handle NAs in 'cluster'")
cl <- list(1)
sign <- 1
g <- sapply(1L:length(cl), function(i) length(levels(cluster[[i]])))
g
i <- 1
efi <- ef
efi
adj <- if (g[i] > 1) g[i] / (g[i] - 1L) else 1
adj
g[i]
n
cluster[[i]]
efi <- if (g[i] < n) apply(efi, 2L, rowsum, cluster[[i]]) else efi
efi
rval <- rval + sign[i] * adj * crossprod(efi) / n
rval
efi
rval
my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
m <- my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
b <- my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
(b %*% m %*% b) / nrow(design_matrix)
cov <- (b %*% m %*% b) / nrow(design_matrix)
cov
p_values_sandwich <- lapply(1:ngene, function(gene_idx) {
y <- X[gene_idx,]
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
m <- my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
b <- my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
cov <- (b %*% m %*% b) / nrow(design_matrix)
print(cov)
contrast = c(0,1)
eff_d = sum(contrast * beta)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
p_values_sandwich <- lapply(1:ngene, function(gene_idx) {
y <- X[gene_idx,]
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
m <- my_meatCL(design_matrix, y, beta, 1/alpha, metadata$id)
b <- my_bread(design_matrix, y, beta, alpha, rep(1, nrow(design_matrix)))
cov <- (b %*% m %*% b) / nrow(design_matrix)
print(gene_idx - 1)
print(cov)
contrast = c(0,1)
eff_d = sum(contrast * beta)
p = pchisq(eff_d^2/(sum(t(contrast)%*%cov%*%contrast)),1,lower.tail=FALSE)
p
}) %>% unlist()
# check comparisons ####
gene_idx <- 1
beta <- rdevil.fit$params$beta[,gene_idx]
alpha <- rdevil.fit$params$theta[gene_idx]
beta
alpha
my_bread(
design_matrix,
y = X[gene_idx,],
beta = rdevil.fit$params$beta[,gene_idx],
alpha = rdevil.fit$params$theta[gene_idx],
size_factors = rdevil.fit$params$size_factors
)
my_bread(
design_matrix,
y = X[gene_idx,],
beta = rdevil.fit$params$beta[,gene_idx],
alpha = rdevil.fit$params$theta[gene_idx],
size_factors = rdevil.fit$params$size_factors
) /
dim(X)
dim(X)
dim(X)[2]
my_bread(
design_matrix,
y = X[gene_idx,],
beta = rdevil.fit$params$beta[,gene_idx],
alpha = rdevil.fit$params$theta[gene_idx],
size_factors = rdevil.fit$params$size_factors
) / dim(X)[2]
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
center_m <- function(X_c) {
cm <- sweep(X_c, 2, colMeans(X_c), "-")  # Centering the matrix
sds <- sqrt(colMeans(cm^2))  # Calculating standard deviations
for (i in seq_len(ncol(X_c))) {
if (sds[i] > 0) {
cm[, i] <- cm[, i] / sds[i]  # Scaling columns by standard deviation
} else {
if (X_c[1, i] != 0) {
cm[, i] <- rep(1, nrow(X_c))  # Assigning a constant vector for special case
} else {
sds[i] <- -1  # Marking the column by setting sds to -1 for special case
}
}
}
return(list(pred = cm, sds = sds))
}
data = readRDS("de_analysis/nullpower/test_data/pb.TRUE.bca.n.10.ct.1.fc.0.5.csv")
metadata <- data$meta
metadata$id <- as.factor(metadata$id)
countMatrix <- data$count
write.csv(as.matrix(countMatrix), file = "../../counts.csv")
write.csv(metadata, file = "../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
dim(X)
ngene <- 500
X <- X[1:ngene,]
metadata$fake <- rnorm(nrow(metadata), mean = 0, sd = 1e-6)
design_matrix = model.matrix(~ 1+tx_cell+fake, data=metadata)
group_matrix <- matrix(0, nrow = dim(X)[2], ncol=length(unique(metadata$id))) %>%
`colnames<-`(unique(metadata$id))
for (g in colnames(group_matrix)) {
group_matrix[,g] = (metadata$id == g) * 1
}
write.csv(group_matrix, file = "../../group_matrix.csv")
ids <- metadata$id
# Nebula fit
nebula.fit <- nebula::nebula(X %>% as.matrix(), ids, pred=model.matrix(~~1+tx_cell+fake, data=metadata), cpc=0, mincp=0, covariance = T, output_re = T)
hist(nebula.fit$summary$p_tx_cell, breaks = 100)
# Rdevil fit
design_matrix <- model.matrix(~~1+tx_cell, data=metadata)
rdevil.fit <- rdevil::fit_linear_model(
X %>% as.matrix(),
model_matrix=design_matrix,
variance = "Hessian",
size_factors = FALSE,
group_matrix=metadata$id,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=1e-6,
full_cov=T,
gauss_loc = 5,
disp_loc = 3,
batch_size = 10000L
)
)
metadata$id
rdevil.fit <- rdevil::fit_linear_model(
X %>% as.matrix(),
model_matrix=design_matrix,
variance = "Hessian",
size_factors = FALSE,
#group_matrix=metadata$id,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=1e-6,
full_cov=T,
gauss_loc = 5,
disp_loc = 3,
batch_size = 10000L
)
)
setwd("~/Desktop/dottorato/rdevil_project")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
center_m <- function(X_c) {
cm <- sweep(X_c, 2, colMeans(X_c), "-")  # Centering the matrix
sds <- sqrt(colMeans(cm^2))  # Calculating standard deviations
for (i in seq_len(ncol(X_c))) {
if (sds[i] > 0) {
cm[, i] <- cm[, i] / sds[i]  # Scaling columns by standard deviation
} else {
if (X_c[1, i] != 0) {
cm[, i] <- rep(1, nrow(X_c))  # Assigning a constant vector for special case
} else {
sds[i] <- -1  # Marking the column by setting sds to -1 for special case
}
}
}
return(list(pred = cm, sds = sds))
}
data = readRDS("de_analysis/nullpower/test_data/pb.TRUE.bca.n.10.ct.1.fc.0.5.csv")
metadata <- data$meta
metadata$id <- as.factor(metadata$id)
countMatrix <- data$count
write.csv(as.matrix(countMatrix), file = "../../counts.csv")
write.csv(metadata, file = "../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
ngene <- 5
X <- X[1:ngene,]
metadata$fake <- rnorm(nrow(metadata), mean = 0, sd = 1e-6)
#metadata$id <- factor(metadata$id)
design_matrix = model.matrix(~ 1+tx_cell+id, data=metadata)
group_matrix = model.matrix(~factor(metadata$id) - 1)
ids <- metadata$id
# Nebula fit
nebula.fit <- nebula::nebula(X %>% as.matrix(), ids, pred=model.matrix(~~1+tx_cell+id, data=metadata), cpc=0, mincp=0, covariance = T, output_re = T)
{
print("nebula parameters")
print(nebula.fit$overdispersion$Subject)
print(nebula.fit$overdispersion$Cell)
print(nebula.fit$summary$`logFC_(Intercept)`)
print(nebula.fit$summary$logFC_tx_cell)
print(nebula.fit$summary$logFC_id)
print(nebula.fit$summary$`logFC_(Intercept)` - nebula.fit$summary$logFC_tx_cell)
nebula.fit$random_effect
}
setwd("~/Desktop/dottorato/rdevil_project")
rm(list = ls())
library(tidyverse)
library(rdevil)
library(nebula)
center_m <- function(X_c) {
cm <- sweep(X_c, 2, colMeans(X_c), "-")  # Centering the matrix
sds <- sqrt(colMeans(cm^2))  # Calculating standard deviations
for (i in seq_len(ncol(X_c))) {
if (sds[i] > 0) {
cm[, i] <- cm[, i] / sds[i]  # Scaling columns by standard deviation
} else {
if (X_c[1, i] != 0) {
cm[, i] <- rep(1, nrow(X_c))  # Assigning a constant vector for special case
} else {
sds[i] <- -1  # Marking the column by setting sds to -1 for special case
}
}
}
return(list(pred = cm, sds = sds))
}
data = readRDS("de_analysis/nullpower/test_data/pb.TRUE.bca.n.10.ct.1.fc.0.5.csv")
metadata <- data$meta
metadata$id <- as.factor(metadata$id)
countMatrix <- data$count
write.csv(as.matrix(countMatrix), file = "../../counts.csv")
write.csv(metadata, file = "../../meta.csv")
# Create design matrix
colnames(metadata)
X <- countMatrix
ngene <- 500
X <- X[1:ngene,]
metadata$fake <- rnorm(nrow(metadata), mean = 0, sd = 1e-6)
design_matrix = model.matrix(~ 1+tx_cell+fake, data=metadata)
group_matrix <- matrix(0, nrow = dim(X)[2], ncol=length(unique(metadata$id))) %>%
`colnames<-`(unique(metadata$id))
for (g in colnames(group_matrix)) {
group_matrix[,g] = (metadata$id == g) * 1
}
write.csv(group_matrix, file = "../../group_matrix.csv")
ids <- metadata$id
class(ids)
ids[1]
# Nebula fit
nebula.fit <- nebula::nebula(X %>% as.matrix(), ids, pred=model.matrix(~~1+tx_cell+fake, data=metadata), cpc=0, mincp=0, covariance = T, output_re = T)
hist(nebula.fit$summary$p_tx_cell, breaks = 100)
# Rdevil fit
design_matrix <- model.matrix(~~1+tx_cell, data=metadata)
rdevil.fit <- rdevil::fit_linear_model(
X %>% as.matrix(),
model_matrix=design_matrix,
variance = "Hessian",
size_factors = FALSE,
#group_matrix=metadata$id,
method_specific_args = list(
steps=2000L,
lr=0.5,
gamma_lr=1e-6,
full_cov=T,
gauss_loc = 5,
disp_loc = 3,
batch_size = 10000L
)
)
