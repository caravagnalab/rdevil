convert_date <- function(date_string) {
date_string  = (date_string) %>% as.character()
if (is.na(date_string) || date_string == "NA")
return(NA)
parts <- strsplit(date_string, "\\.")[[1]]
day <- as.integer(parts[1])
month <- roman_to_month(parts[2])
year <- as.integer(parts[3])
# date <- as.Date(paste(year, month, day, sep = "-"))
# return(date)
paste(year, month, day, sep = "-")
}
# time_series$Data = paste(time_series$Data)
time_series$Data = sapply(time_series$Data, convert_date)
time_series$plasma = time_series$plasma %>% as.numeric()
time_series
}
x = bind_rows(
parser(1) %>% mutate(type = "ROS"),
parser(2) %>% mutate(type = "EGFR"),
parser(3) %>% mutate(type = "ALK")
)
ggplot(x) +
geom_line(aes(x = as.Date(Data), y = plasma, color = type)) +
facet_wrap( ~ Paziente, scales = 'free')
View(x)
setwd("~/Desktop/dottorato/biPOD_project/paper/NSCL")
library(tidyverse)
parser = function(sheet)
{
x = readxl::read_excel("data/LB data 22.XI.2023.xlsx",
sheet = sheet,
col_types = 'text')
# Time series
ngml = grepl('ng/mL', colnames(x))
ngml[1] = TRUE
ng_ts = x[, ngml] %>% reshape2::melt(id = 'Paziente') %>% as_tibble() %>% arrange(Paziente)
dates = grepl('data prelievo', colnames(x))
dates[1] = TRUE
dates_ts = x[, dates] %>% reshape2::melt(id = 'Paziente') %>% as_tibble() %>% arrange(Paziente)
time_series = cbind(dates_ts %>% select(1, 3), ng_ts %>% select(3))
colnames(time_series) = c("Paziente", "Data", "plasma")
time_series = time_series %>%  as_tibble()
# Dates
library(lubridate)
# Function to convert Roman numerals to month numbers
roman_to_month <- function(roman) {
roman_numerals <-
c("I",
"II",
"III",
"IV",
"V",
"VI",
"VII",
"VIII",
"IX",
"X",
"XI",
"XII")
month_num <- match(roman, roman_numerals)
return(month_num)
}
# Function to convert date string to Date object
convert_date <- function(date_string) {
date_string  = (date_string) %>% as.character()
if (is.na(date_string) || date_string == "NA")
return(NA)
parts <- strsplit(date_string, "\\.")[[1]]
day <- as.integer(parts[1])
month <- roman_to_month(parts[2])
year <- as.integer(parts[3])
# date <- as.Date(paste(year, month, day, sep = "-"))
# return(date)
paste(year, month, day, sep = "-")
}
# time_series$Data = paste(time_series$Data)
time_series$Data = sapply(time_series$Data, convert_date)
time_series$plasma = time_series$plasma %>% as.numeric()
time_series
}
x = bind_rows(
parser(1) %>% mutate(type = "ROS"),
parser(2) %>% mutate(type = "EGFR"),
parser(3) %>% mutate(type = "ALK")
)
class(x)
x %>% na.omit()
x %>% na.omit() %>% saveRDS("data/data.rds")
setwd("~/Desktop/dottorato/biPOD_project/paper/NSCL")
rm(list = ls())
library(tidyverse)
x <- readRDS("data/data.rds")
x
id <- x$Paziente[1]
data <- readRDS("data/data.rds")
id <- data$Paziente[1]
data$Data - min(data$Data)
as.numeric(data$Data)
class(data$Data(1))
class(data$Data[1])
data$Data[1]
data$Data[1] %>% as.Date()
data$Data[1] %>% as.Date() %>% as.numeric()
setwd("~/Desktop/dottorato/biPOD_project/paper/NSCL")
library(tidyverse)
parser = function(sheet)
{
x = readxl::read_excel("data/LB data 22.XI.2023.xlsx",
sheet = sheet,
col_types = 'text')
# Time series
ngml = grepl('ng/mL', colnames(x))
ngml[1] = TRUE
ng_ts = x[, ngml] %>% reshape2::melt(id = 'Paziente') %>% as_tibble() %>% arrange(Paziente)
dates = grepl('data prelievo', colnames(x))
dates[1] = TRUE
dates_ts = x[, dates] %>% reshape2::melt(id = 'Paziente') %>% as_tibble() %>% arrange(Paziente)
time_series = cbind(dates_ts %>% select(1, 3), ng_ts %>% select(3))
colnames(time_series) = c("Paziente", "Data", "plasma")
time_series = time_series %>%  as_tibble()
# Dates
library(lubridate)
# Function to convert Roman numerals to month numbers
roman_to_month <- function(roman) {
roman_numerals <-
c("I",
"II",
"III",
"IV",
"V",
"VI",
"VII",
"VIII",
"IX",
"X",
"XI",
"XII")
month_num <- match(roman, roman_numerals)
return(month_num)
}
# Function to convert date string to Date object
convert_date <- function(date_string) {
date_string  = (date_string) %>% as.character()
if (is.na(date_string) || date_string == "NA")
return(NA)
parts <- strsplit(date_string, "\\.")[[1]]
day <- as.integer(parts[1])
month <- roman_to_month(parts[2])
year <- as.integer(parts[3])
# date <- as.Date(paste(year, month, day, sep = "-"))
# return(date)
paste(year, month, day, sep = "-")
}
# time_series$Data = paste(time_series$Data)
time_series$Data = sapply(time_series$Data, convert_date)
time_series$plasma = time_series$plasma %>% as.numeric()
time_series
}
x = bind_rows(
parser(1) %>% mutate(type = "ROS"),
parser(2) %>% mutate(type = "EGFR"),
parser(3) %>% mutate(type = "ALK")
)
x %>%
na.omit() %>%
dplyr::mutate(Data = as.Date(Data)) %>%
dplyr::mutate(time = as.numeric(Data)) %>%
saveRDS("data/data.rds")
setwd("~/Desktop/dottorato/biPOD_project/paper/NSCL")
rm(list = ls())
library(tidyverse)
data <- readRDS("data/data.rds")
id <- data$Paziente[1]
id
data %>%
dplyr::filter(Paziente == id)
data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time))
time_factor <- 28
id <- data$Paziente[1]
data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor)
data <- readRDS("data/data.rds")
time_factor <- 365
id <- data$Paziente[1]
data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor)
data <- readRDS("data/data.rds")
time_factor <- 28
id <- data$Paziente[1]
data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor)
time_factor <- 28
factor_size <- .01
id <- data$Paziente[1]
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(x, "id")
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01)
x$metadata$breakpoints
biPOD::plot_breakpoints_posterior(x)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
biPOD::plot_fit(x)
id <- unique(data$Paziente)[1]
id
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
id <- unique(data$Paziente)[2]
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
biPOD::plot_fit(x)
biPOD::plot_fit(x)
id <- unique(data$Paziente)[1]
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
biPOD::plot_fit(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01, max_iter = 40)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
biPOD::plot_fit(x)
biPOD::plot_fit(x) +
ggtitle(id)
setwd("~/Desktop/dottorato/biPOD_project/paper/NSCL")
rm(list = ls())
library(tidyverse)
data <- readRDS("data/data.rds")
time_factor <- 28
factor_size <- .01
lapply(unique(data$Paziente), function(id) {
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01, max_iter = 40)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
saveRDS(x, paste0("results/", id, ".rds"))
biPOD::plot_fit(x) +
ggtitle(id)
})
plots <- lapply(unique(data$Paziente), function(id) {
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01, max_iter = 40)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
saveRDS(x, paste0("results/", id, ".rds"))
biPOD::plot_fit(x, zoom = F) +
ggtitle(id)
})
plots <- lapply(unique(data$Paziente), function(id) {
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01, max_iter = 40)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
saveRDS(x, paste0("results/", id, ".rds"))
p <- biPOD::plot_fit(x, zoom = F) +
ggtitle(id)
ggsave(paste0("img/", id, ".pdf"), plot = p, width = 8, height = 4)
p
})
setwd("~/Desktop/dottorato/rdevil_project/de_analysis")
rm(list = ls())
# Null test
is.pb <- FALSE
plots1 <- lapply(1:6, function(ct.index) {
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
d1$devil.hess = d2$devil.hess
d1$devil.hess.mixed = d2$devil.hess..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = .8) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw() +
scale_color_manual(values = c("red", "green", "blue", "yellow", "black", "pink", "purple", "cyan", "orange"))
})
p <- ggpubr::ggarrange(plotlist = plots1)
p
p <- ggpubr::ggarrange(plotlist = plots1)
ggsave(filename = paste0("img/is_pb_", is.pb, "_null.png"), dpi = 300, width = 16, height = 9)
# Null test
is.pb <- TRUE
plots1 <- lapply(1:6, function(ct.index) {
if (is.pb) {
head_foler = "nullpower/null_cell/"
} else {
head_foler = "nullpower/null_subject/"
}
d1 <- read.delim(paste0(head_foler, "bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d2 <- read.delim(paste0(head_foler, "devil.bca.n.10.ct.",ct.index,".fc.0.5.csv"), sep = ",")
d1$devil = d2$devil
d1$devil.mixed = d2$devil..Mixed.
d1$devil.hess = d2$devil.hess
d1$devil.hess.mixed = d2$devil.hess..Mixed.
cols <- colnames(d1)
d <- lapply(2:ncol(d1), function(c) {
values = d1[,c] %>% sort()
x = seq(0,1,length = length(values))
dplyr::tibble(x = x, observed_p_value = values, name = colnames(d1)[c])
}) %>% do.call("bind_rows", .)
d %>%
ggplot(mapping = aes(x=x, y=observed_p_value, col=name)) +
geom_point(size = 1) +
geom_abline(slope = 1, intercept = 0, col = "black", linetype="dashed") +
ggtitle(paste0(ct.index, " - ", is.pb)) +
theme_bw() +
scale_color_manual(values = c("red", "green", "blue", "yellow", "black", "pink", "purple", "cyan", "orange"))
})
p <- ggpubr::ggarrange(plotlist = plots1)
p
setwd("~/Desktop/dottorato/rdevil_project/de_analysis/nullpower")
rm(list = ls())
source("utils/glmGamPoi.R")
source("utils/devil.R")
source("utils/nebula.R")
require(magrittr)
data <- readRDS("test_data/pb.FALSE.bca.n.10.ct.1.fc.0.5.csv")
X <- data$count
meta <- data$meta
X <- X[1:400,]
glm.fit <- glmGamPoi::glm_gp(sce.obj, design=~1+tx_cell, on_disk=FALSE, size_factors=FALSE)
glm.fit <- glmGamPoi::glm_gp(X, design=~1+tx_cell, col_data = meta, on_disk=FALSE, size_factors=FALSE)
design_matrix <- model.matrix(~1+tx_cell, data = meta)
batch_factor <- 4
count <- X %>% as.matrix()
devil.fit <- rdevil::fit_linear_model(
input_matrix = count, model_matrix = design_matrix, group_matrix = NULL,
inference_method = "SVI",
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(1000),
lr = 0.5,
gamma_lr = 1e-6,
variance = "Hessian",
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(count)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 3,
gauss_loc = 5
#prior_loc = 2,
#theta_bounds = c(0, 1e5),
#init_loc = .25,
#threshold = 1e-9
)
)
glm.fit$Beta[1,]
fit$params$beta[,1]
devil.fit$params$beta[,1]
glm.fit$Beta[1,]
devil.fit$params$beta[,1]
plot(glm.fit$Beta[,1], fit$params$beta[1,])
plot(glm.fit$Beta[,1], devil.fit$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit$params$beta[2,])
plot(glm.fit$overdispersions, devil.fit$params$theta)
plot(glm.fit$Beta[,1], devil.fit$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit$params$beta[2,])
plot(glm.fit$overdispersions, devil.fit$params$theta)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1))
cor.test(glm.fit$overdispersions, devil.fit$params$theta)
plot(glm.fit$overdispersions, devil.fit$params$theta)
glm.res <- glmGamPoi::test_de(glm.fit, contrast = c(0,1))
devil.res <- rdevil::test_posterior_null(devil.fit, contrast = as.array(c(0,1)))
plot(glm.res$pval, devil.res$p_value)
max_idx <- as.integer(5000 * .05)
devil.null.p.values <- devil.res$p_value[(max_idx+1):nrow(devil.res)]
glm.null.p.values <- glm.res$pval[(max_idx+1):nrow(devil.res)]
plot(devil.null.p.values, glm.null.p.values)
gap::qqunif(devil.null.p.values)
gap::qqunif(glm.null.p.values)
devil.fit$residuals
setwd("~/Desktop/dottorato/biPOD_project/paper/NSCL")
rm(list = ls())
library(tidyverse)
data <- readRDS("data/data.rds")
time_factor <- 28
factor_size <- .01
plots <- lapply(unique(data$Paziente), function(id) {
d <- data %>%
dplyr::filter(Paziente == id) %>%
dplyr::mutate(time = time - min(time)) %>%
dplyr::mutate(time = time / time_factor) %>%
dplyr::mutate(count = plasma)
x <- biPOD::init(d, "id")
biPOD::plot_input(x)
x <- biPOD::breakpoints_inference(x, factor_size = .01, max_iter = 50)
x <- biPOD::fit(x, infer_t0 = F, factor_size = .01)
saveRDS(x, paste0("results/", id, ".rds"))
p <- biPOD::plot_fit(x, zoom = F) +
ggtitle(id)
ggsave(paste0("img/", id, ".pdf"), plot = p, width = 8, height = 4)
p
})
library(rdevil)
setwd("~/Desktop/dottorato/rdevil_project/de_analysis/nullpower")
rm(list = ls())
source("utils/glmGamPoi.R")
source("utils/devil.R")
source("utils/nebula.R")
require(magrittr)
data <- readRDS("test_data/pb.FALSE.bca.n.10.ct.1.fc.0.5.csv")
X <- data$count
meta <- data$meta
X <- X[1:400,]
glm.fit <- glmGamPoi::glm_gp(X, design=~1+tx_cell, col_data = meta, on_disk=FALSE, size_factors=FALSE)
design_matrix <- model.matrix(~1+tx_cell, data = meta)
batch_factor <- 4
count <- X %>% as.matrix()
devil.fit <- rdevil::fit_linear_model(
input_matrix = count, model_matrix = design_matrix, group_matrix = NULL,
inference_method = "SVI",
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(1000),
lr = 0.5,
gamma_lr = 1e-6,
variance = "Hessian",
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(count)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 3,
gauss_loc = 5
#prior_loc = 2,
#theta_bounds = c(0, 1e5),
#init_loc = .25,
#threshold = 1e-9
)
)
devil.fit <- rdevil::fit_linear_model(
input_matrix = count, model_matrix = design_matrix, group_matrix = NULL,
inference_method = "SVI",
size_factors = FALSE;
devil.fit <- rdevil::fit_linear_model(
input_matrix = count, model_matrix = design_matrix, group_matrix = NULL,
inference_method = "SVI",
size_factors = FALSE,
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(1000),
lr = 0.5,
gamma_lr = 1e-6,
variance = "Hessian",
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(count)[2] / batch_factor),
full_cov = TRUE,
disp_loc = 3,
gauss_loc = 5
#prior_loc = 2,
#theta_bounds = c(0, 1e5),
#init_loc = .25,
#threshold = 1e-9
)
)
