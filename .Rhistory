theta_bounds = c(0, 1e9),
init_loc = 10,
threshold = 0
)
)
plot(log10(glm.fit$overdispersions), log10(1 / devil.fit.full$params$theta))
plot(log10(glm.fit$overdispersions), log10(1 / devil.fit.batched$params$theta))
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
batch_factor <- 10
devil.fit.full <- rdevil::fit_linear_model(
input_matrix = X,
model_matrix = design_matrix,
group_matrix = NULL,
ncounts = UMI,
gene_names = rownames(X),
method_specific_args = list(
optimizer_name = "ClippedAdam",
steps = as.integer(1000),
lr = 0.5,
gamma_lr = 1e-8,
cuda = TRUE,
jit_compile = TRUE,
batch_size = as.integer(dim(X)[2] / batch_factor),
full_cov = TRUE,
prior_loc = 10,
theta_bounds = c(0, 1e9),
init_loc = 10,
threshold = 0
)
)
plot(log10(glm.fit$overdispersions), log10(1 / devil.fit.full$params$theta))
plot(log10(glm.fit$overdispersions), log10(1 / devil.fit.batched$params$theta))
plot(glm.fit$Beta[,1], devil.fit.full$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.full$params$beta[2,])
plot(glm.fit$Beta[,1], devil.fit.batched$params$beta[1,])
plot(glm.fit$Beta[,2], devil.fit.batched$params$beta[2,])
# Look at variances
devil.full.res <- rdevil::test_posterior_null(devil.fit.full, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.batch.res <- rdevil::test_posterior_null(devil.fit.batched, contrast = contrast) %>%
dplyr::rename(avg_log2FC = log_FC, p_val_adj = p_value_adj)
devil.full.rope.res <- rdevil::test_posterior_ROPE(devil.fit.full, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.batch.rope.res <- rdevil::test_posterior_ROPE(devil.fit.batched, contrast = contrast, LFC = 1e-100) %>%
dplyr::rename(avg_log2FC = log_FC, p_val = ROPE)
devil.full.rope.res$p_val_adj = stats::p.adjust(devil.full.rope.res$p_val, method = "BH")
devil.batch.rope.res$p_val_adj = stats::p.adjust(devil.batch.rope.res$p_val, method = "BH")
# PRECIOSION vs RECALL
results <- list(
'glm' = glm.res,
'devil.full' = devil.full.res,
'devil.batch' = devil.batch.res
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw()
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw()
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
pr_plot
roc_plot
names(results)
hists <- lapply(names(results), function(n) {
results[[n]] %>%
dplyr::filter(!(gene %in% sim$de.genes)) %>%
ggplot(mapping = aes(x = p_value)) +
geom_histogram(bins = 100) +
ggtitle(n)
})
ggpubr::ggarrange(plotlist = hists)
# HESSIAN ####
source("compute_hessian.R")
new_variances = array(data = NA, dim = c(dim(X)[1], 2, 2))
tmp <- lapply(1:dim(X)[1], function(gene_idx) {
print(gene_idx)
new_variances[gene_idx,,] <<- compute_hessian_optimized(gene_idx, f=devil.fit.batched, X=X, design_matrix = design_matrix)
})
new_variances[1,,]
devil.fit.full$params$variance[1,,]
devil.fit.batched$params$variance[1,,]
# TEST WITH NEW VARIANCES ####
df_new_variance = dplyr::tibble()
for (gene_idx in 1:nrow(devil.full.res)) {
f <- devil.fit.full
contrast = as.array(contrast)
total_variance = t(contrast) %*% new_variances[gene_idx,,] %*% contrast
eff = sum(contrast * f$params$beta[,gene_idx])
#p_chi = pchisq(eff^2/variance,1,lower.tail=F)
p_wald <- 2 * (1 - pnorm(abs(eff), mean = 0, sd = sqrt(total_variance)))
df_new_variance <- dplyr::bind_rows(df_new_variance,
dplyr::tibble(gene = devil.full.res$gene[gene_idx], avg_log2FC = eff, p_value = p_wald))
}
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "BH")
plot(df_new_variance$p_value, glm.res$p_value)
plot(df_new_variance$p_val_adj, glm.res$p_val_adj)
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
??stats::p.adjust
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "holm")
plot(df_new_variance$p_value, glm.res$p_value)
plot(df_new_variance$p_val_adj, glm.res$p_val_adj)
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
stats::p.adjust.methods
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "hochberg")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "hommel")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
stats::p.adjust.methods
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "bonferroni")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "BH")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "BY")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
stats::p.adjust.methods
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "fdr")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
plot(df_new_variance$p_value, glm.res$p_value)
plot(df_new_variance$p_val_adj, glm.res$p_val_adj)
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
# Redo plots
results <- list(
'glm' = glm.res,
'devil' = devil.full.res,
'devil_batch' = devil.batch.res,
"devil_w_hessian" = df_new_variance
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "BH")
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
stats::p.adjust.methods
plot(df_new_variance$p_value, glm.res$p_value)
plot(df_new_variance$p_val_adj, glm.res$p_val_adj)
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
# Redo plots
results <- list(
'glm' = glm.res,
'devil' = devil.full.res,
'devil_batch' = devil.batch.res,
"devil_w_hessian" = df_new_variance
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "BH")
plot(df_new_variance$p_value, glm.res$p_value)
plot(df_new_variance$p_val_adj, glm.res$p_val_adj)
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
# Redo plots
results <- list(
'glm' = glm.res,
'devil' = devil.full.res,
'devil_batch' = devil.batch.res,
"devil_w_hessian" = df_new_variance
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw() +
theme(legend.position = "bottom")
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw() +
theme(legend.position = "bottom")
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
values_at_05 <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, p_threshold = c(.05)) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
values_at_05
values_at_05 <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
print(n)
n <- names(results)[1]
res <- results[[n]]
res
res %>% dplyr::select(gene, p_val_adj)
get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5) %>% dplyr::mutate(name = n)
values_at_05 <- lapply(names(results), function(n) {
print(n)
n <- names(results)[1]
res <- results[[n]]
fscore <- get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5)
dplyr::tibble(name = n, fscore = fscore)
}) %>% do.call("bind_rows", .)
fscores <- lapply(names(results), function(n) {
print(n)
n <- names(results)[1]
res <- results[[n]]
fscore <- get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5)
dplyr::tibble(name = n, fscore = fscore)
}) %>% do.call("bind_rows", .)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
fscores
fscores <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
fscore <- get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5)
dplyr::tibble(name = n, fscore = fscore)
}) %>% do.call("bind_rows", .)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
fscores
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw() +
theme(legend.position = "bottom")
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw() +
theme(legend.position = "bottom")
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
require(patchwork)
p <- (pr_plot | roc_plot | table_grob)
p
source("scripts/metrics.R")
# Redo plots
results <- list(
'glm' = glm.res,
'devil' = devil.full.res,
'devil_batch' = devil.batch.res,
"devil_w_hessian" = df_new_variance
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
fscores <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
fscore <- get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5)
dplyr::tibble(name = n, fscore = fscore)
}) %>% do.call("bind_rows", .)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
fscores
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw() +
theme(legend.position = "bottom")
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw() +
theme(legend.position = "bottom")
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
require(patchwork)
p <- (pr_plot | roc_plot | table_grob)
p
# TEST WITH NEW VARIANCES ####
df_new_variance = dplyr::tibble()
for (gene_idx in 1:nrow(devil.full.res)) {
f <- devil.fit.batched
contrast = as.array(contrast)
total_variance = t(contrast) %*% new_variances[gene_idx,,] %*% contrast
eff = sum(contrast * f$params$beta[,gene_idx])
#p_chi = pchisq(eff^2/variance,1,lower.tail=F)
p_wald <- 2 * (1 - pnorm(abs(eff), mean = 0, sd = sqrt(total_variance)))
df_new_variance <- dplyr::bind_rows(df_new_variance,
dplyr::tibble(gene = devil.full.res$gene[gene_idx], avg_log2FC = eff, p_value = p_wald))
}
# HESSIAN ####
source("compute_hessian.R")
new_variances = array(data = NA, dim = c(dim(X)[1], 2, 2))
tmp <- lapply(1:dim(X)[1], function(gene_idx) {
print(gene_idx)
new_variances[gene_idx,,] <<- compute_hessian_optimized(gene_idx, f=devil.fit.full, X=X, design_matrix = design_matrix)
})
new_variances[1,,]
devil.fit.full$params$variance[1,,]
devil.fit.batched$params$variance[1,,]
# TEST WITH NEW VARIANCES ####
df_new_variance = dplyr::tibble()
for (gene_idx in 1:nrow(devil.full.res)) {
f <- devil.fit.batched
contrast = as.array(contrast)
total_variance = t(contrast) %*% new_variances[gene_idx,,] %*% contrast
eff = sum(contrast * f$params$beta[,gene_idx])
#p_chi = pchisq(eff^2/variance,1,lower.tail=F)
p_wald <- 2 * (1 - pnorm(abs(eff), mean = 0, sd = sqrt(total_variance)))
df_new_variance <- dplyr::bind_rows(df_new_variance,
dplyr::tibble(gene = devil.full.res$gene[gene_idx], avg_log2FC = eff, p_value = p_wald))
}
df_new_variance$p_val_adj = stats::p.adjust(df_new_variance$p_value, method = "BH")
plot(df_new_variance$p_value, glm.res$p_value)
plot(df_new_variance$p_val_adj, glm.res$p_val_adj)
plot(-log10(df_new_variance$p_val_adj), -log10(glm.res$p_val_adj))
# Redo plots
results <- list(
'glm' = glm.res,
'devil' = devil.full.res,
'devil_batch' = devil.batch.res,
"devil_w_hessian" = df_new_variance
#'devil_chi' = new_results %>% dplyr::rename(p_val_adj = p_value_chi_adj, p_value = p_value_chi),
#'devil_wald' = new_results %>% dplyr::rename(p_val_adj = p_value_wald_adj, p_value = p_value_wald)
)
fscores <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
fscore <- get_Fscore(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes, Fscore_cutoff = .05, Fscore_beta = .5)
dplyr::tibble(name = n, fscore = fscore)
}) %>% do.call("bind_rows", .)
curves_pr <- lapply(names(results), function(n) {
print(n)
res <- results[[n]]
get_pr_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
curves_roc <- lapply(names(results), function(n) {
res <- results[[n]]
get_roc_curve_thresholds(res %>% dplyr::select(gene, p_val_adj), de.genes = sim$de.genes) %>% dplyr::mutate(name = n)
}) %>% do.call("bind_rows", .)
table_roc <- lapply(names(results), function(n) {
v = approximate_AUC(curves_roc %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, auroc = v)
}) %>% do.call('bind_rows', .)
table_pr <- lapply(names(results), function(n) {
v = approximate_AUC(curves_pr %>% dplyr::filter(name == n))
dplyr::tibble(algorithm = n, aupr = v)
}) %>% do.call('bind_rows', .)
full_table = dplyr::full_join(table_roc, table_pr, by = 'algorithm')
full_table
fscores
pr_plot <- curves_pr %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "Precision - Recall curve", x = "recall", y = "precision") +
theme_bw() +
theme(legend.position = "bottom")
roc_plot <- curves_roc %>%
ggplot(mapping = aes(x=x, y=y, fill=name, col=name)) +
geom_point() +
geom_line() +
labs(title = "ROC curve", x = "x", y = "y") +
theme_bw() +
theme(legend.position = "bottom")
table_grob <- condformat::condformat(full_table) %>%
condformat::rule_text_bold(auroc, auroc == max(auroc)) %>%
condformat::rule_text_bold(aupr, aupr == max(aupr)) %>%
condformat::condformat2grob()
require(patchwork)
p <- (pr_plot | roc_plot | table_grob)
p
